"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOptions = getOptions;
exports.defaultOptions = void 0;
// A second optional argument can be given to further configure
// the parser process. These options are recognized:
var defaultOptions = {
  // Source type ("script" or "module") for different semantics
  sourceType: "script",
  // Source filename.
  sourceFilename: undefined,
  // Line from which to start counting source. Useful for
  // integration with other tools.
  startLine: 1,
  // When enabled, await at the top level is not considered an
  // error.
  allowAwaitOutsideFunction: false,
  // When enabled, a return at the top level is not considered an
  // error.
  allowReturnOutsideFunction: false,
  // When enabled, import/export statements are not constrained to
  // appearing at the top of the program.
  allowImportExportEverywhere: false,
  // TODO
  allowSuperOutsideMethod: false,
  // When enabled, export statements can reference undeclared variables.
  allowUndeclaredExports: false,
  // An array of plugins to enable
  plugins: [],
  // TODO
  strictMode: null,
  // Nodes have their start and end characters offsets recorded in
  // `start` and `end` properties (directly on the node, rather than
  // the `loc` object, which holds line/column data. To also add a
  // [semi-standardized][range] `range` property holding a `[start,
  // end]` array with the same numbers, set the `ranges` option to
  // `true`.
  //
  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
  ranges: false,
  // Adds all parsed tokens to a `tokens` property on the `File` node
  tokens: false,
  // Whether to create ParenthesizedExpression AST nodes (if false
  // the parser sets extra.parenthesized on the expression nodes instead).
  createParenthesizedExpressions: false,
  // When enabled, errors are attached to the AST instead of being directly thrown.
  // Some errors will still throw, because @babel/parser can't always recover.
  errorRecovery: false
}; // Interpret and default an options object

exports.defaultOptions = defaultOptions;

function getOptions(opts) {
  var options = {};

  for (var _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];
    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];
  }

  return options;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vcHRpb25zLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRPcHRpb25zIiwic291cmNlVHlwZSIsInNvdXJjZUZpbGVuYW1lIiwidW5kZWZpbmVkIiwic3RhcnRMaW5lIiwiYWxsb3dBd2FpdE91dHNpZGVGdW5jdGlvbiIsImFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uIiwiYWxsb3dJbXBvcnRFeHBvcnRFdmVyeXdoZXJlIiwiYWxsb3dTdXBlck91dHNpZGVNZXRob2QiLCJhbGxvd1VuZGVjbGFyZWRFeHBvcnRzIiwicGx1Z2lucyIsInN0cmljdE1vZGUiLCJyYW5nZXMiLCJ0b2tlbnMiLCJjcmVhdGVQYXJlbnRoZXNpemVkRXhwcmVzc2lvbnMiLCJlcnJvclJlY292ZXJ5IiwiZ2V0T3B0aW9ucyIsIm9wdHMiLCJvcHRpb25zIiwiT2JqZWN0Iiwia2V5cyIsImtleSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUlBO0FBQ0E7QUFxQk8sSUFBTUEsY0FBdUIsR0FBRztBQUNyQztBQUNBQyxFQUFBQSxVQUFVLEVBQUUsUUFGeUI7QUFHckM7QUFDQUMsRUFBQUEsY0FBYyxFQUFFQyxTQUpxQjtBQUtyQztBQUNBO0FBQ0FDLEVBQUFBLFNBQVMsRUFBRSxDQVAwQjtBQVFyQztBQUNBO0FBQ0FDLEVBQUFBLHlCQUF5QixFQUFFLEtBVlU7QUFXckM7QUFDQTtBQUNBQyxFQUFBQSwwQkFBMEIsRUFBRSxLQWJTO0FBY3JDO0FBQ0E7QUFDQUMsRUFBQUEsMkJBQTJCLEVBQUUsS0FoQlE7QUFpQnJDO0FBQ0FDLEVBQUFBLHVCQUF1QixFQUFFLEtBbEJZO0FBbUJyQztBQUNBQyxFQUFBQSxzQkFBc0IsRUFBRSxLQXBCYTtBQXFCckM7QUFDQUMsRUFBQUEsT0FBTyxFQUFFLEVBdEI0QjtBQXVCckM7QUFDQUMsRUFBQUEsVUFBVSxFQUFFLElBeEJ5QjtBQXlCckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxFQUFBQSxNQUFNLEVBQUUsS0FqQzZCO0FBa0NyQztBQUNBQyxFQUFBQSxNQUFNLEVBQUUsS0FuQzZCO0FBb0NyQztBQUNBO0FBQ0FDLEVBQUFBLDhCQUE4QixFQUFFLEtBdENLO0FBdUNyQztBQUNBO0FBQ0FDLEVBQUFBLGFBQWEsRUFBRTtBQXpDc0IsQ0FBaEMsQyxDQTRDUDs7OztBQUVPLFNBQVNDLFVBQVQsQ0FBb0JDLElBQXBCLEVBQTZDO0FBQ2xELE1BQU1DLE9BQVksR0FBRyxFQUFyQjs7QUFDQSxrQ0FBa0JDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZcEIsY0FBWixDQUFsQixrQ0FBK0M7QUFBMUMsUUFBTXFCLEdBQUcsbUJBQVQ7QUFDSEgsSUFBQUEsT0FBTyxDQUFDRyxHQUFELENBQVAsR0FBZUosSUFBSSxJQUFJQSxJQUFJLENBQUNJLEdBQUQsQ0FBSixJQUFhLElBQXJCLEdBQTRCSixJQUFJLENBQUNJLEdBQUQsQ0FBaEMsR0FBd0NyQixjQUFjLENBQUNxQixHQUFELENBQXJFO0FBQ0Q7O0FBQ0QsU0FBT0gsT0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUgeyBQbHVnaW5MaXN0IH0gZnJvbSBcIi4vcGx1Z2luLXV0aWxzXCI7XG5cbi8vIEEgc2Vjb25kIG9wdGlvbmFsIGFyZ3VtZW50IGNhbiBiZSBnaXZlbiB0byBmdXJ0aGVyIGNvbmZpZ3VyZVxuLy8gdGhlIHBhcnNlciBwcm9jZXNzLiBUaGVzZSBvcHRpb25zIGFyZSByZWNvZ25pemVkOlxuXG5leHBvcnQgdHlwZSBTb3VyY2VUeXBlID0gXCJzY3JpcHRcIiB8IFwibW9kdWxlXCIgfCBcInVuYW1iaWd1b3VzXCI7XG5cbmV4cG9ydCB0eXBlIE9wdGlvbnMgPSB7XG4gIHNvdXJjZVR5cGU6IFNvdXJjZVR5cGUsXG4gIHNvdXJjZUZpbGVuYW1lPzogc3RyaW5nLFxuICBzdGFydExpbmU6IG51bWJlcixcbiAgYWxsb3dBd2FpdE91dHNpZGVGdW5jdGlvbjogYm9vbGVhbixcbiAgYWxsb3dSZXR1cm5PdXRzaWRlRnVuY3Rpb246IGJvb2xlYW4sXG4gIGFsbG93SW1wb3J0RXhwb3J0RXZlcnl3aGVyZTogYm9vbGVhbixcbiAgYWxsb3dTdXBlck91dHNpZGVNZXRob2Q6IGJvb2xlYW4sXG4gIGFsbG93VW5kZWNsYXJlZEV4cG9ydHM6IGJvb2xlYW4sXG4gIHBsdWdpbnM6IFBsdWdpbkxpc3QsXG4gIHN0cmljdE1vZGU6ID9ib29sZWFuLFxuICByYW5nZXM6IGJvb2xlYW4sXG4gIHRva2VuczogYm9vbGVhbixcbiAgY3JlYXRlUGFyZW50aGVzaXplZEV4cHJlc3Npb25zOiBib29sZWFuLFxuICBlcnJvclJlY292ZXJ5OiBib29sZWFuLFxufTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRPcHRpb25zOiBPcHRpb25zID0ge1xuICAvLyBTb3VyY2UgdHlwZSAoXCJzY3JpcHRcIiBvciBcIm1vZHVsZVwiKSBmb3IgZGlmZmVyZW50IHNlbWFudGljc1xuICBzb3VyY2VUeXBlOiBcInNjcmlwdFwiLFxuICAvLyBTb3VyY2UgZmlsZW5hbWUuXG4gIHNvdXJjZUZpbGVuYW1lOiB1bmRlZmluZWQsXG4gIC8vIExpbmUgZnJvbSB3aGljaCB0byBzdGFydCBjb3VudGluZyBzb3VyY2UuIFVzZWZ1bCBmb3JcbiAgLy8gaW50ZWdyYXRpb24gd2l0aCBvdGhlciB0b29scy5cbiAgc3RhcnRMaW5lOiAxLFxuICAvLyBXaGVuIGVuYWJsZWQsIGF3YWl0IGF0IHRoZSB0b3AgbGV2ZWwgaXMgbm90IGNvbnNpZGVyZWQgYW5cbiAgLy8gZXJyb3IuXG4gIGFsbG93QXdhaXRPdXRzaWRlRnVuY3Rpb246IGZhbHNlLFxuICAvLyBXaGVuIGVuYWJsZWQsIGEgcmV0dXJuIGF0IHRoZSB0b3AgbGV2ZWwgaXMgbm90IGNvbnNpZGVyZWQgYW5cbiAgLy8gZXJyb3IuXG4gIGFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uOiBmYWxzZSxcbiAgLy8gV2hlbiBlbmFibGVkLCBpbXBvcnQvZXhwb3J0IHN0YXRlbWVudHMgYXJlIG5vdCBjb25zdHJhaW5lZCB0b1xuICAvLyBhcHBlYXJpbmcgYXQgdGhlIHRvcCBvZiB0aGUgcHJvZ3JhbS5cbiAgYWxsb3dJbXBvcnRFeHBvcnRFdmVyeXdoZXJlOiBmYWxzZSxcbiAgLy8gVE9ET1xuICBhbGxvd1N1cGVyT3V0c2lkZU1ldGhvZDogZmFsc2UsXG4gIC8vIFdoZW4gZW5hYmxlZCwgZXhwb3J0IHN0YXRlbWVudHMgY2FuIHJlZmVyZW5jZSB1bmRlY2xhcmVkIHZhcmlhYmxlcy5cbiAgYWxsb3dVbmRlY2xhcmVkRXhwb3J0czogZmFsc2UsXG4gIC8vIEFuIGFycmF5IG9mIHBsdWdpbnMgdG8gZW5hYmxlXG4gIHBsdWdpbnM6IFtdLFxuICAvLyBUT0RPXG4gIHN0cmljdE1vZGU6IG51bGwsXG4gIC8vIE5vZGVzIGhhdmUgdGhlaXIgc3RhcnQgYW5kIGVuZCBjaGFyYWN0ZXJzIG9mZnNldHMgcmVjb3JkZWQgaW5cbiAgLy8gYHN0YXJ0YCBhbmQgYGVuZGAgcHJvcGVydGllcyAoZGlyZWN0bHkgb24gdGhlIG5vZGUsIHJhdGhlciB0aGFuXG4gIC8vIHRoZSBgbG9jYCBvYmplY3QsIHdoaWNoIGhvbGRzIGxpbmUvY29sdW1uIGRhdGEuIFRvIGFsc28gYWRkIGFcbiAgLy8gW3NlbWktc3RhbmRhcmRpemVkXVtyYW5nZV0gYHJhbmdlYCBwcm9wZXJ0eSBob2xkaW5nIGEgYFtzdGFydCxcbiAgLy8gZW5kXWAgYXJyYXkgd2l0aCB0aGUgc2FtZSBudW1iZXJzLCBzZXQgdGhlIGByYW5nZXNgIG9wdGlvbiB0b1xuICAvLyBgdHJ1ZWAuXG4gIC8vXG4gIC8vIFtyYW5nZV06IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc0NTY3OFxuICByYW5nZXM6IGZhbHNlLFxuICAvLyBBZGRzIGFsbCBwYXJzZWQgdG9rZW5zIHRvIGEgYHRva2Vuc2AgcHJvcGVydHkgb24gdGhlIGBGaWxlYCBub2RlXG4gIHRva2VuczogZmFsc2UsXG4gIC8vIFdoZXRoZXIgdG8gY3JlYXRlIFBhcmVudGhlc2l6ZWRFeHByZXNzaW9uIEFTVCBub2RlcyAoaWYgZmFsc2VcbiAgLy8gdGhlIHBhcnNlciBzZXRzIGV4dHJhLnBhcmVudGhlc2l6ZWQgb24gdGhlIGV4cHJlc3Npb24gbm9kZXMgaW5zdGVhZCkuXG4gIGNyZWF0ZVBhcmVudGhlc2l6ZWRFeHByZXNzaW9uczogZmFsc2UsXG4gIC8vIFdoZW4gZW5hYmxlZCwgZXJyb3JzIGFyZSBhdHRhY2hlZCB0byB0aGUgQVNUIGluc3RlYWQgb2YgYmVpbmcgZGlyZWN0bHkgdGhyb3duLlxuICAvLyBTb21lIGVycm9ycyB3aWxsIHN0aWxsIHRocm93LCBiZWNhdXNlIEBiYWJlbC9wYXJzZXIgY2FuJ3QgYWx3YXlzIHJlY292ZXIuXG4gIGVycm9yUmVjb3Zlcnk6IGZhbHNlLFxufTtcblxuLy8gSW50ZXJwcmV0IGFuZCBkZWZhdWx0IGFuIG9wdGlvbnMgb2JqZWN0XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcHRpb25zKG9wdHM6ID9PcHRpb25zKTogT3B0aW9ucyB7XG4gIGNvbnN0IG9wdGlvbnM6IGFueSA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhkZWZhdWx0T3B0aW9ucykpIHtcbiAgICBvcHRpb25zW2tleV0gPSBvcHRzICYmIG9wdHNba2V5XSAhPSBudWxsID8gb3B0c1trZXldIDogZGVmYXVsdE9wdGlvbnNba2V5XTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn1cbiJdfQ==