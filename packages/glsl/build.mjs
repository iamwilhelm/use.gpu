import fs from 'fs';
import glob from 'glob';

const TARGET = './src/index.ts';

const files = glob.sync('src/**/*.glsl');
const modules = {};

const nameify = (s) => '_' + s.toString().replace(/[^A-Za-z0-9]+/g, '');
const escape = (s) => JSON.stringify(s.toString());

const keys = [];
const names = [];
const paths = [];

for (const file of files) {
  const path = file.split('/');

  const id = path.pop().replace(/\.glsl$/, '');
  const tokens = [...path.slice(1), id];
	
	const name = nameify(tokens.join(''));
	const key = tokens.join('/');

  paths.push(file.replace('src/', ''));
	keys.push(key);
	names.push(name);
}

const imports = files.map((file, i) => `import ${names[i]} from ${JSON.stringify('./' + paths[i])};`);
const importMap = files.map((file, i) => `  ${JSON.stringify(keys[i])}: ${names[i]},`);  
const staticMap = files.map((file, i) => `  ${JSON.stringify(keys[i])}: ${escape(fs.readFileSync(file))},`);  

/*
const ts = `// File generated by build.mjs. Do not edit directly.
${imports.join("\n")}
export const GLSLModules = {
${importMap.join("\n")}
} as Record<string, string>;
export default GLSLModules;
`;
fs.writeFileSync(TARGET, ts);
*/

const ts = `// File generated by build.mjs. Do not edit directly.
export const GLSLModules = {
${staticMap.join("\n")}
};
export default GLSLModules;
`;
fs.writeFileSync(TARGET, ts);

