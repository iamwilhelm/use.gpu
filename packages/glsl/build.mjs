import path from 'path';
import fs from 'fs';
import glob from 'glob';

const PACKAGE_JSON = './package.json';
const INDEX_TS = './src/index.ts';
const TARGET = '../../build/packages/glsl';

const files = glob.sync('src/**/*.glsl');
const modules = {};

const escape = (s) => JSON.stringify(s.toString());

const keys = [];
const names = [];
const paths = [];

for (const file of files) {
  const keys = file.split('/');

  const id = keys.pop().replace(/\.glsl$/, '');
  const tokens = [...keys.slice(1), id];
	const name = tokens.join('/');

  // Copy glsl files to build/packages/glsl/
  const target = path.join(TARGET, file);
  const dir = path.dirname(target);
  fs.mkdirSync(dir, {recursive: true});
  fs.copyFileSync(file, target);

  paths.push(file.replace('src/', ''));
	names.push(name);
}

// Update exports in package.json
try {
  const PKG = JSON.parse(fs.readFileSync(PACKAGE_JSON));
  PKG.exports = {".": "./src/index.ts"};
  for (let path of paths) {
    PKG.exports['./' + path] = './src/' + path;
  }
  const json = JSON.stringify(PKG, null, 2);
  fs.writeFileSync(PACKAGE_JSON, json);
} catch (e) {}

// Generate static include for testing
const staticMap = files.flatMap((file, i) => [
  `  ${JSON.stringify(names[i])}: ${escape(fs.readFileSync(file))},`,
  `  ${JSON.stringify('@use-gpu/glsl/' + names[i])}: ${escape(fs.readFileSync(file))},`,
]);
const ts = `// File generated by build.mjs. Do not edit directly.
// This file provides all the shader code in a statically importable form, used for testing.
export const GLSLModules = {
${staticMap.join("\n")}
};
export default GLSLModules;
`;
fs.writeFileSync(INDEX_TS, ts);
