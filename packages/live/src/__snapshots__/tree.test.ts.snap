// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`captures values 1`] = `
"<Root >
  <Capture(undefined) displayName={undefined} capture={true} [<Fiber >,<Fiber >,…] (…) (0, _builtin.use)(Node, list)>
    <Fiber >
    <Fiber >
    <Fiber >
  <Resume(undefined) (…) (0, _builtin.use)(Node, list)>
    <Node [1,2,…]>"
`;

exports[`gathers yeeted values 1`] = `
"<Root >
  <Yeet 1>
  <Value >
  <Yeet 3>
<Resume(Root) (…) (0, _builtin.use)(Node, values)>
  <Node [1,2,…]>"
`;

exports[`render reordering 1`] = `
"<Root >
  <Provide(undefined) initialValue={-1} displayName={undefined} context={true} 0 <Memo() >>
    <Memo() >
      <Node id={0}>
      <Node id={1}>
      <Node id={2}>"
`;

exports[`render reordering 2`] = `
"<Root >
  <Provide(undefined) initialValue={-1} displayName={undefined} context={true} 1 <Memo() >>
    <Memo() >
      <Node id={1}>
      <Node id={2}>
      <Node id={0}>"
`;

exports[`renders quote/unquote pairs 1`] = `
"<Root >
  <Reconcile displayName={Test} reconciler={true} reconcile={reconcile(…) reconcileTo(self, el)} quote={quote(…) quoteTo(self, el)} signal={signal(…) signalTo(self)} <First <Quote … …>>>
    <First <Quote displayName={…} reconciler={…} reconcile={…} quote={…} signal={…} <Second …>>>
      <Quote displayName={Test} reconciler={true} reconcile={reconcile(…) reconcileTo(self, el)} quote={quote(…) quoteTo(self, el)} signal={signal(…) signalTo(self)} <Second <Unquote …>>>
        <First <Quote displayName={…} reconciler={…} reconcile={…} quote={…} signal={…} <Unquote …>>>
          <First <First <Quote … …>>>
            <First <Quote displayName={…} reconciler={…} reconcile={…} quote={…} signal={…} <Second >>>
        <Resolve(First) >
      <Resolve(Quote) >
    <Resolve(First) >
  <Root(Test) >
    <Second <Second <Unquote …>>>
      <Second <Unquote <Quote … …>>>
        <Second <Unquote <First …>>>
          <Unquote <First <First …>>>
            <Second >
          <Resolve(Unquote) >
        <Resolve(Second) >
      <Resolve(Second) >
  <Resolve(Test) >"
`;

exports[`renders quoted tree 1`] = `
"<Root >
  <Reconcile displayName={Test} reconciler={true} reconcile={reconcile(…) reconcileTo(self, el)} quote={quote(…) quoteTo(self, el)} signal={signal(…) signalTo(self)} [<Node >,<Quote … …>,…]>
    <Node >
    <Quote displayName={Test} reconciler={true} reconcile={reconcile(…) reconcileTo(self, el)} quote={quote(…) quoteTo(self, el)} signal={signal(…) signalTo(self)} <Tree >>
    <Node >
  <Root(Test) >
    <Tree >
      <Node <Node <Node >>>
        <Node <Node >>
          <Node >
  <Resolve(Test) >"
`;

exports[`renders quoted/unquoted trees 1`] = `
"<Root >
  <Reconcile displayName={Test} reconciler={true} reconcile={reconcile(…) reconcileTo(self, el)} quote={quote(…) quoteTo(self, el)} signal={signal(…) signalTo(self)} <Quote displayName={…} reconciler={…} reconcile={…} quote={…} signal={…} <Second …>>>
    <Quote displayName={Test} reconciler={true} reconcile={reconcile(…) reconcileTo(self, el)} quote={quote(…) quoteTo(self, el)} signal={signal(…) signalTo(self)} <Second <Second …>>>
      <First <Quote displayName={…} reconciler={…} reconcile={…} quote={…} signal={…} <Second …>>>
        <First <First <Quote … …>>>
          <First <Quote displayName={…} reconciler={…} reconcile={…} quote={…} signal={…} <Second >>>
      <Resolve(First) >
    <Resolve(Quote) >
  <Root(Test) >
    <Second <Second <Unquote …>>>
      <Second <Unquote <First …>>>
        <Second <Unquote <First …>>>
          <Second >
        <Resolve(Second) >
      <Resolve(Second) >
  <Resolve(Test) >"
`;

exports[`yeets from capture 1`] = `
"<Root >
  <Capture(undefined) displayName={undefined} capture={true} [f={YEET(…) {}} arg={1} key={undefined} by={1},f={…} arg={…} key={…} by={…},…,…] (…) (0, _builtin.yeet)(list)>
    <Yeet 1>
    <Yeet 2>
    <Fiber >
    <Fiber >
  <Resume(undefined) (…) (0, _builtin.yeet)(list)>
<Resume(Root) (…) (0, _builtin.use)(Node, values)>
  <Node [1,2,…,…]>"
`;
