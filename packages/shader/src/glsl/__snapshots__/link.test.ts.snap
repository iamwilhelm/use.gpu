// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`link lifts recursive dependency 1`] = `
"#version 450

    // Lifted Code
    void _00_getLifted() {}
    

    vec4 _01_getColor2() { return vec4(1.0, 0.0, 1.0, 1.0); }
    

    vec4 _02_getColor1() { return _01_getColor2(); }
    

    void main() {
      gl_FragColor = _02_getColor1();
    }
    "
`;

exports[`link links a global across a module 1`] = `
"#version 450

    void _00_getPosition() {};
    
    vec4 _00_getColor(int index) {
      _00_getPosition();
      return vec4(1.0, 0.0, 1.0, 1.0);
    }
    

    vec4 getPosition(int index) { return vec4(1.0, 0.0, 1.0, 1.0); }
    

    vec4 getPosition(int index);
    vec4 _00_getColor(int index);
    void main() {
      vec4 a = getPosition(0);
    }
    "
`;

exports[`link links an external 1`] = `
"#version 450

    vec4 _00_getColor() { return vec4(1.0, 0.0, 1.0, 1.0); }
    

    vec4 _00_getColor();
    void main() {
      vec4 v;
      v.xyz = vec3(1.0, 0.0, 0.0);
      gl_FragColor = _00_getColor();
    }
    "
`;

exports[`link links quad vertex 1`] = `
"#version 450
const ivec2 _00_QUAD[] = {
  ivec2(0, 0),
  ivec2(1, 0),
  ivec2(0, 1),
  ivec2(1, 1),
};

ivec2 _00_getQuadIndex(int vertex) {
  return _00_QUAD[vertex];
}

vec2 _00_getQuadUV(int vertex) {
  return vec2(_00_getQuadIndex(vertex));
}

struct _01_SolidVertex {
  vec4 position;
  vec4 color;
  vec2 uv;
};


layout(set = VIEW_BINDGROUP, binding = VIEW_BINDING) uniform _02_ViewUniforms {
  mat4 projectionMatrix;
  mat4 viewMatrix;
  vec4 viewPosition;
  vec2 viewResolution;
  vec2 viewSize;
} _02_viewUniforms;

vec4 _02_worldToView(vec4 position) {
  return _02_viewUniforms.viewMatrix * position;
}

vec4 _02_viewToClip(vec4 position) {
  return _02_viewUniforms.projectionMatrix * position;
}

vec4 _02_worldToClip(vec4 position) {
  return _02_viewToClip(_02_worldToView(position));
}



    vec4 _03_getColor(int index) { return vec4(1.0, 0.0, 1.0, 1.0); }
    

    vec4 _04_getPerspective(int index) { return 1.0; }
    

    vec4 _05_getPosition(int index) { return vec4(1.0, 0.0, 1.0, 1.0); }
    

    float _06_getSize(int index) { return 1.0; }
    
vec4 _05_getPosition(int);
vec4 _03_getColor(int);
vec2 _06_getSize(int);
float _04_getPerspective(int);

_01_SolidVertex getQuadVertex(int vertexIndex, int instanceIndex) {
  vec4 instancePosition = _05_getPosition(instanceIndex);
  vec4 instanceColor = _03_getColor(instanceIndex);
  vec2 instanceSize = _06_getSize(instanceIndex);
  float instancePerspective = _04_getPerspective(instanceIndex);

  vec4 position = _02_worldToClip(instancePosition);

  vec2 uv = _00_getQuadUV(vertexIndex);
  vec2 xy = uv * 2.0 - 1.0;
  
  #ifdef HAS_EDGE_BLEED
  xy = xy * (instanceSize + 0.5) / instanceSize;
  uv = xy * .5 + .5;
  #endif

  float w = mix(position.w, 1.0, instancePerspective);
  position.xy += xy * _02_viewUniforms.viewResolution * instanceSize * w;

  return _01_SolidVertex(
    position,
    instanceColor,
    uv
  );
}"
`;

exports[`link links same module twice with different entry point 1`] = `
"#version 450

    float _00_used() { return 1.0; }
    
    vec4 _00_getPosition(int index) { return vec4(_00_used(), 0.0, 1.0, 1.0); }

    vec4 _00_getColor(int index) { return vec4(_00_used(), 0.0, 1.0, 1.0); }
    

    vec4 _00_getPosition(int index);
    vec4 _00_getColor(int index);
    void main() {
      vec4 a = _00_getPosition(0);
      vec4 b = _00_getColor(0);
    }
    "
`;

exports[`link tree shakes around identifiers 1`] = `
"#version 450

    float _00_used() { return 1.0; }

    vec4 _00_getPosition(int index) { return vec4(_00_used(), 0.0, 1.0, 1.0); }

    

    vec4 _00_getPosition(int index);
    void main() {
      vec4 a = _00_getPosition(0);
    }
    "
`;

exports[`link tree shakes around identifiers 2`] = `
"#version 450

    float _00_used() { return 1.0; }

    vec4 _00_getPosition(int index) { return vec4(_00_used(), 0.0, 1.0, 1.0); }

    

    vec4 _00_getPosition(int index);
    void main() {
      vec4 a = _00_getPosition(0);
    }
    "
`;

exports[`link tree shakes constants 1`] = `
"#version 450

    const vec4 _00_colorUsed = vec4(0.0, 0.1, 0.2, 0.0);
    vec4 _00_getColor() {
      return _00_colorUsed;
    }
    

    vec4 _00_getColor();
    void main() {
      vec4 a = _00_getColor();
    }
    "
`;

exports[`link tree shakes constants 2`] = `
"#version 450

    const vec4 _00_colorUsed = vec4(0.0, 0.1, 0.2, 0.0);
    vec4 _00_getColor() {
      return _00_colorUsed;
    }
    

    vec4 _00_getColor();
    void main() {
      vec4 a = _00_getColor();
    }
    "
`;
