// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`link lifts recursive dependency 1`] = `
"#version 450


    // Lifted Code
    void _wh_getLifted() {}
    

    vec4 _2g_getColor2() { return vec4(1.0, 0.0, 1.0, 1.0); }
    

    vec4 _y5_getColor1() { return _2g_getColor2(); }
    

    void main() {
      gl_FragColor = _y5_getColor1();
    }
    "
`;

exports[`link links an external 1`] = `
"#version 450


    vec4 _21_getColor() { return vec4(1.0, 0.0, 1.0, 1.0); }
    

    vec4 _21_getColor();
    void main() {
      vec4 v;
      v.xyz = vec3(1.0, 0.0, 0.0);
      gl_FragColor = _21_getColor();
    }
    "
`;

exports[`link links quad vertex 1`] = `
"#version 450

const ivec2 _vz_QUAD[] = {
  ivec2(0, 0),
  ivec2(1, 0),
  ivec2(0, 1),
  ivec2(1, 1),
};

ivec2 _vz_getQuadIndex(int vertex) {
  return _vz_QUAD[vertex];
}

vec2 _vz_getQuadUV(int vertex) {
  return vec2(_vz_getQuadIndex(vertex));
}

struct _3w_SolidVertex {
  vec4 position;
  vec4 color;
  vec2 uv;
};


layout(set = 0, binding = VIEW_BINDING) uniform _e6_ViewUniforms {
  mat4 projectionMatrix;
  mat4 viewMatrix;
  vec4 viewPosition;
  vec2 viewResolution;
  vec2 viewSize;
} _e6_viewUniforms;

vec4 _e6_worldToView(vec4 position) {
  return _e6_viewUniforms.viewMatrix * position;
}

vec4 _e6_viewToClip(vec4 position) {
  return _e6_viewUniforms.projectionMatrix * position;
}

vec4 _e6_worldToClip(vec4 position) {
  return _e6_viewToClip(_e6_worldToView(position));
}



    vec4 _9a_getColor(int index) { return vec4(1.0, 0.0, 1.0, 1.0); }
    

    vec4 _hu_getPosition(int index) { return vec4(1.0, 0.0, 1.0, 1.0); }
    

    float _vi_getSize(int index) { return 1.0; }
    
vec4 _hu_getPosition(int);
vec4 _9a_getColor(int);
float _vi_getSize(int);

_3w_SolidVertex getQuadVertex(int vertexIndex, int instanceIndex) {
  vec4 instancePosition = _hu_getPosition(instanceIndex);
  vec4 instanceColor = _9a_getColor(instanceIndex);
  float instanceSize = _vi_getSize(instanceIndex);

  vec4 position = _e6_worldToClip(instancePosition);

  vec2 uv = _vz_getQuadUV(vertexIndex);
  vec2 xy = uv * 2.0 - 1.0;
  
  #ifdef HAS_EDGE_BLEED
  xy = xy * (instanceSize + 0.5) / instanceSize;
  uv = xy * .5 + .5;
  #endif
  
  position.xy += xy * _e6_viewUniforms.viewResolution * (instanceSize * position.w);

  return _3w_SolidVertex(
    position,
    instanceColor,
    uv
  );
}"
`;

exports[`link links same module twice with different entry point 1`] = `
"#version 450


    vec4 _lr_getColor(int index) { return vec4(1.0, 0.0, 1.0, 1.0); }
    

    vec4 _lrc_getPosition(int index) { return vec4(1.0, 0.0, 1.0, 1.0); }

    

    vec4 _lrc_getPosition(int index);
    vec4 _lr_getColor(int index);
    void main() {
      vec4 a = _lrc_getPosition(0);
      vec4 b = _lr_getColor(0);
    }
    "
`;
