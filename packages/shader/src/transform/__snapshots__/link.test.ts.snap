// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`link lifts recursive dependency 1`] = `
"#version 450


    // Lifted Code
    
    void _oy_getLifted() {}
    

    
    
    vec4 _8r_getColor2() { return vec4(1.0, 0.0, 1.0, 1.0); }
    

    
    
    vec4 _wn_getColor1() { return _8r_getColor2(); }
    

    
    
    void main() {
      gl_FragColor = _wn_getColor1();
    }
    "
`;

exports[`link links an external 1`] = `
"#version 450


    
    vec4 _aq_getColor() { return vec4(1.0, 0.0, 1.0, 1.0); }
    

    vec4 _aq_getColor();
    void main() {
      vec4 v;
      v.xyz = vec3(1.0, 0.0, 0.0);
      gl_FragColor = _aq_getColor();
    }
    "
`;

exports[`link links quad vertex 1`] = `
"#version 450

const ivec2 _6s_QUAD[] = {
  ivec2(0, 0),
  ivec2(1, 0),
  ivec2(0, 1),
  ivec2(1, 1),
};


ivec2 _6s_getQuadIndex(int vertex) {
  return _6s_QUAD[vertex];
}


vec2 _6s_getQuadUV(int vertex) {
  return vec2(_6s_getQuadIndex(vertex));
}


    
    vec4 _sh_getPosition(int index) { return vec4(1.0, 0.0, 1.0, 1.0); }
    

    
    float _fz_getSize(int index) { return 1.0; }
    

struct _89_SolidVertex {
  vec4 position;
  vec4 color;
  vec2 uv;
};


struct _89_MeshVertex {
  vec4 position;
  vec3 normal;
  vec4 color;
  vec2 uv;
};

layout(set = 0, binding = VIEW_BINDING) uniform _ng_ViewUniforms {
  mat4 projectionMatrix;
  mat4 viewMatrix;
  vec4 viewPosition;
  vec2 viewResolution;
  vec2 viewSize;
} _ng_viewUniforms;


vec4 _ng_worldToView(vec4 position) {
  return _ng_viewUniforms.viewMatrix * position;
}


vec4 _ng_viewToClip(vec4 position) {
  return _ng_viewUniforms.projectionMatrix * position;
}


vec4 _ng_worldToClip(vec4 position) {
  return _ng_viewToClip(_ng_worldToView(position));
}


vec3 _ng_clipToScreen3D(vec4 position) {
  return vec3(position.xy * _ng_viewUniforms.viewSize, position.z);
}


vec3 _ng_screenToClip3D(vec4 position) {
  return vec3(position.xy * _ng_viewUniforms.viewResolution, position.z);
}


vec3 _ng_worldToClip3D(vec4 position) {
  position = _ng_viewToClip(_ng_worldToView(position));
  return position.xyz / position.w;
}





vec4 _sh_getPosition(int);
float _fz_getSize(int);


_89_SolidVertex getQuadVertex(int vertexIndex, int instanceIndex) {
  vec4 instancePosition = _sh_getPosition(instanceIndex);
  float instanceSize = _fz_getSize(instanceIndex);

  vec4 position = _ng_worldToClip(instancePosition);

  vec2 uv = _6s_getQuadUV(vertexIndex);
  vec2 xy = uv * 2.0 - 1.0;
  position.xy += xy * _ng_viewUniforms.viewResolution * (instanceSize * position.w);

  return _89_SolidVertex(
    position,
    vec4(abs(instancePosition.xyz) / 2.0, 1.0),
    uv
  );
}"
`;
