// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`link hoists an enable directive 1`] = `
"enable f16;
//// @link getColor _01_


    fn _01_main() -> vec4<f32> { return vec4<f32>(1.0, 0.0, 1.0, 1.0); }
    
//// @link main 


    fn main() -> @location(0) vec4<f32> {
      return _01_main();
    }
    "
`;

exports[`link lifts recursive dependency 1`] = `
"//// @link getLifted _01_


    // Lifted Code
    fn _01_getLifted() {};
    
//// @link getColor2 _02_


    fn _02_getColor2() -> vec4<f32> { return vec4<f32>(1.0, 0.0, 1.0, 1.0); }
    
//// @link getColor1 _03_


    fn _03_getColor1() -> vec4<f32> { return _02_getColor2(); }
    
//// @link main 


    fn main() -> vec4<f32> {
      return _03_getColor1();
    }
    "
`;

exports[`link links a global across a module 1`] = `
"//// @link sub1 _01_


    fn getPosition(index: i32) -> vec4<f32> { return vec4<f32>(1.0, 0.0, 1.0, 1.0); }
    
//// @link sub2 _02_


    fn _02_getPosition() {};
    
    fn _02_getColor(index: i32) -> vec4<f32> {
      _02_getPosition();
      return vec4<f32>(1.0, 0.0, 1.0, 1.0);
    }
    
//// @link main 


    fn main() {
      var a = getPosition(0);
    }
    "
`;

exports[`link links a struct and field 1`] = `
"//// @link sub1 _01_


    struct _01_Foo { bar: f32 };
    fn _01_access(foo: _01_Foo) -> f32 { return foo.bar; }

//// @link main 


    fn main() {
      var a = getPosition(0);
    }
    "
`;

exports[`link links an external 1`] = `
"//// @link getColor _01_


    fn _01_main() -> vec4<f32> { return vec4<f32>(1.0, 0.0, 1.0, 1.0); }
    
//// @link main 


    fn main() -> @location(0) vec4<f32> {
      return _01_main();
    }
    "
`;

exports[`link links quad vertex 1`] = `
"//// @link @use-gpu/wgsl/use/types _01_


struct _01_SolidVertex {
  position: vec4<f32>,
  color: vec4<f32>,
  uv: vec2<f32>,
};


//// @link @use-gpu/wgsl/use/view _02_


struct _02_ViewUniforms {
  projectionMatrix: mat4x4<f32>,
  viewMatrix: mat4x4<f32>,
  viewPosition: vec4<f32>,
  viewResolution: vec2<f32>,
  viewSize: vec2<f32>,
  viewWorldDepth: f32,
  viewPixelRatio: f32,
};

@group(VIEW) @binding(VIEW) var<uniform> _02_viewUniforms: _02_ViewUniforms;

fn _02_worldToView(position: vec4<f32>) -> vec4<f32> {
  return _02_viewUniforms.viewMatrix * position;
}

fn _02_viewToClip(position: vec4<f32>) -> vec4<f32> {
  return _02_viewUniforms.projectionMatrix * position;
}

fn _02_worldToClip(position: vec4<f32>) -> vec4<f32> {
  return _02_viewToClip(_02_worldToView(position));
}

fn _02_getPerspectiveScale(w: f32, f: f32) -> f32 {
  var m = _02_viewUniforms.projectionMatrix;
  var worldScale = m[1][1] * _02_viewUniforms.viewWorldDepth;
  var clipScale = mix(1.0, worldScale / w, f);
  var pixelScale = clipScale * _02_viewUniforms.viewPixelRatio;
  return pixelScale;
}

//// @link @use-gpu/wgsl/geometry/quad _03_



const _03_QUAD: array<vec2<i32>, 4> = array<vec2<i32>, 4>(
  vec2<i32>(0, 0),
  vec2<i32>(1, 0),
  vec2<i32>(0, 1),
  vec2<i32>(1, 1),
);

fn _03_getQuadIndex(vertex: i32) -> vec2<i32> {
  return _03_QUAD[vertex];
}

fn _03_getQuadUV(vertex: i32) -> vec2<f32> {
  return vec2<f32>(_03_getQuadIndex(vertex));
}


//// @link main _04_


    fn _04_getPosition(index: i32) -> vec4<f32> { return vec4<f32>(1.0, 0.0, 1.0, 1.0); }
    
//// @link main _05_


    fn _05_getColor(index: i32) -> vec4<f32> { return vec4<f32>(1.0, 0.0, 1.0, 1.0); }
    
//// @link main _06_


    fn _06_getSize(index: i32) -> f32 { return 1.0; }
    
//// @link main _07_


    fn _07_getDepth(index: i32) -> f32 { return 0.5; }
    
//// @link getQuadVertex 


fn getQuadVertex(vertexIndex: i32, instanceIndex: i32) -> _01_SolidVertex {
  var position = _04_getPosition(instanceIndex);
  var color = _05_getColor(instanceIndex);
  var size = _06_getSize(instanceIndex);
  var depth = _07_getDepth(instanceIndex);

  var center = _02_worldToClip(position);

  var uv = _03_getQuadUV(vertexIndex);
  var xy = uv * 2.0 - 1.0;

  // Lerp between fixed size and full perspective.
  var pixelScale = _02_getPerspectiveScale(center.w, depth);
  // TODO: awaiting compound support
  //size *= pixelScale;
  size = size * pixelScale;

  if (HAS_EDGE_BLEED) {
    xy = xy * (size + 0.5) / size;
    uv = xy * .5 + .5;
  }

  // TODO: awaiting compound support
  //center.xy += xy * size * viewUniforms.viewResolution * center.w;
  center = vec4<f32>(center.xy + xy * size * _02_viewUniforms.viewResolution * center.w, center.zw);

  return _01_SolidVertex(
    center,
    color,
    uv
  );
}
"
`;

exports[`link links same module twice with different entry point 1`] = `
"//// @link sub _01_


    fn _01_used() -> f32 { return 1.0; }
    
    fn _01_getPosition(index: i32) -> vec4<f32> { return vec4<f32>(_01_used(), 0.0, 1.0, 1.0); }

    fn _01_getColor(index: i32) -> vec4<f32> { return vec4<f32>(_01_used(), 0.0, 1.0, 1.0); }
    
//// @link main 


    fn main() {
      var a = _01_getPosition(0);
      var b = _01_getColor(0);
    }
    "
`;

exports[`link substitutes attributes 1`] = `
"//// @link getColor _01_


    fn _01_getColor() -> vec4<f32> { return vec4<f32>(1.0, 0.0, 1.0, 1.0); }
    
//// @link main 


    @group(0) @binding(0) var<uniform> color: vec4<f32>;

    fn main() -> @location(0) vec4<f32> {
      return _01_getColor() + color;
    }
    "
`;

exports[`link tree shakes around identifiers 1`] = `
"//// @link sub _01_


    fn _01_used() -> f32 { return 1.0; }
fn _01_getPosition(index: i32) -> vec4<f32> { return vec4<f32>(_01_used(), 0.0, 1.0, 1.0); }

    
//// @link main 


    fn main() {
      var a = _01_getPosition(0);
    }
    "
`;

exports[`link tree shakes around identifiers 2`] = `
"//// @link sub _01_


    fn _01_used() -> f32 { return 1.0; }
fn _01_getPosition(index: i32) -> vec4<f32> { return vec4<f32>(_01_used(), 0.0, 1.0, 1.0); }

    
//// @link main 


    fn main() {
      var a = _01_getPosition(0);
    }
    "
`;

exports[`link tree shakes constants 1`] = `
"//// @link sub _01_


    const _01_colorUsed = vec4<f32>(0.0, 0.1, 0.2, 0.0);
fn _01_getColor() -> vec4<f32> {
      return _01_colorUsed;
    }
    
//// @link main 


    fn main() {
      var a = _01_getColor();
    }
    "
`;

exports[`link tree shakes constants 2`] = `
"//// @link sub _01_


    const _01_colorUsed = vec4<f32>(0.0, 0.1, 0.2, 0.0);
fn _01_getColor() -> vec4<f32> {
      return _01_colorUsed;
    }
    
//// @link main 


    fn main() {
      var a = _01_getColor();
    }
    "
`;
