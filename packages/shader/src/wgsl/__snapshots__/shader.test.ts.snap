// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`shader transpiles wgsl to CJS 1`] = `
"const {decompressAST, bindEntryPoint} = require(\\"@use-gpu/shader/wgsl\\");
const m0 = require(\\"@use-gpu/wgsl/use/types.wgsl\\");
const m1 = require(\\"@use-gpu/wgsl/use/view.wgsl\\");
const m2 = require(\\"@use-gpu/wgsl/geometry/quad.wgsl\\");
const t = {\\"symbols\\":[\\"getPosition\\",\\"getColor\\",\\"getSize\\",\\"getDepth\\",\\"getQuadVertex\\"],\\"visibles\\":[\\"getQuadVertex\\"],\\"modules\\":[{\\"at\\":0,\\"name\\":\\"@use-gpu/wgsl/use/types\\",\\"symbols\\":[\\"SolidVertex\\"],\\"imports\\":[{\\"name\\":\\"SolidVertex\\",\\"imported\\":\\"SolidVertex\\"}]},{\\"at\\":0,\\"name\\":\\"@use-gpu/wgsl/use/view\\",\\"symbols\\":[\\"viewUniforms\\",\\"worldToClip\\",\\"getPerspectiveScale\\"],\\"imports\\":[{\\"name\\":\\"viewUniforms\\",\\"imported\\":\\"viewUniforms\\"},{\\"name\\":\\"worldToClip\\",\\"imported\\":\\"worldToClip\\"},{\\"name\\":\\"getPerspectiveScale\\",\\"imported\\":\\"getPerspectiveScale\\"}]},{\\"at\\":0,\\"name\\":\\"@use-gpu/wgsl/geometry/quad\\",\\"symbols\\":[\\"getQuadUV\\"],\\"imports\\":[{\\"name\\":\\"getQuadUV\\",\\"imported\\":\\"getQuadUV\\"}]}],\\"externals\\":[{\\"at\\":182,\\"symbol\\":\\"getPosition\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getPosition\\",\\"type\\":\\"vec4<f32>\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}},{\\"at\\":228,\\"symbol\\":\\"getColor\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getColor\\",\\"type\\":\\"vec4<f32>\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}},{\\"at\\":271,\\"symbol\\":\\"getSize\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getSize\\",\\"type\\":\\"vec2<f32>\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}},{\\"at\\":313,\\"symbol\\":\\"getDepth\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getDepth\\",\\"type\\":\\"f32\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}}],\\"exports\\":[{\\"at\\":351,\\"symbol\\":\\"getQuadVertex\\",\\"flags\\":1,\\"func\\":{\\"name\\":\\"getQuadVertex\\",\\"type\\":\\"SolidVertex\\",\\"attr\\":[\\"export\\"],\\"parameters\\":[{\\"name\\":\\"vertexIndex\\",\\"type\\":\\"i32\\"},{\\"name\\":\\"instanceIndex\\",\\"type\\":\\"i32\\"}],\\"identifiers\\":[\\"getPosition\\",\\"getColor\\",\\"getSize\\",\\"getDepth\\"]}}],\\"linkable\\":{\\"getPosition\\":true,\\"getColor\\":true,\\"getSize\\":true,\\"getDepth\\":true}}; const data = {
  \\"name\\": \\"/getQuadVertex\\",
  \\"code\\": \\"\\\\nuse '@use-gpu/wgsl/use/types'::{ SolidVertex };\\\\nuse '@use-gpu/wgsl/use/view'::{ viewUniforms, worldToClip, getPerspectiveScale };\\\\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadUV };\\\\n\\\\n@link fn getPosition(i: i32) -> vec4<f32> {};\\\\n@link fn getColor(i: i32) -> vec4<f32> {};\\\\n@link fn getSize(i: i32) -> vec2<f32> {};\\\\n@link fn getDepth(i: i32) -> f32 {};\\\\n\\\\n@export fn getQuadVertex(vertexIndex: i32, instanceIndex: i32) -> SolidVertex {\\\\n  var position = getPosition(instanceIndex);\\\\n  var color = getColor(instanceIndex);\\\\n  var size = getSize(instanceIndex);\\\\n  var depth = getDepth(instanceIndex);\\\\n\\\\n  var center = worldToClip(position);\\\\n\\\\n  var uv = getQuadUV(vertexIndex);\\\\n  var xy = uv * 2.0 - 1.0;\\\\n\\\\n  // Lerp between fixed size and full perspective.\\\\n  var pixelScale = getPerspectiveScale(center.w, depth);\\\\n  // TODO: awaiting compound support\\\\n  //size *= pixelScale;\\\\n  size = size * pixelScale;\\\\n\\\\n  if (HAS_EDGE_BLEED) {\\\\n    xy = xy * (size + 0.5) / size;\\\\n    uv = xy * .5 + .5;\\\\n  }\\\\n\\\\n  // TODO: awaiting compound support\\\\n  //center.xy += xy * size * viewUniforms.viewResolution * center.w;\\\\n  center = vec4<f32>(center.xy + xy * size * viewUniforms.viewResolution * center.w, center.zw);\\\\n\\\\n  return SolidVertex(\\\\n    center,\\\\n    color,\\\\n    uv\\\\n  );\\\\n}\\\\n\\",
  \\"hash\\": 4146593418043979,
  \\"table\\": t,
  \\"shake\\": [[182,[0,4]],[228,[1,4]],[271,[2,4]],[313,[3,4]],[351,[4]]],
  \\"tree\\": decompressAST([[1,1,47],[1,48,128],[1,82,130],[1,51,95],[1,46,87],[1,43,83],[1,42,77],[0,38,928],[1,0,7],[2,11,24],[2,14,25],[2,18,31],[2,23,34],[2,20,28],[2,11,22],[2,12,25],[2,22,27],[2,8,16],[2,9,22],[2,22,26],[2,7,14],[2,8,21],[2,22,27],[2,8,16],[2,9,22],[2,23,29],[2,9,20],[2,12,20],[2,18,20],[2,5,14],[2,10,21],[2,20,22],[2,5,7],[2,74,84],[2,13,32],[2,20,26],[2,10,15],[2,71,75],[2,7,11],[2,7,17],[2,19,33],[2,22,24],[2,5,7],[2,6,10],[2,14,18],[2,10,12],[2,5,7],[2,127,133],[2,19,25],[2,12,14],[2,5,9],[2,7,19],[2,30,36],[2,10,16],[2,22,33],[2,17,23],[2,12,17],[2,11,13]], t.symbols),
};

const libs = {\\"@use-gpu/wgsl/use/types\\": m0, \\"@use-gpu/wgsl/use/view\\": m1, \\"@use-gpu/wgsl/geometry/quad\\": m2};
const getSymbol = (entry) => ({module: bindEntryPoint(data, entry), libs});

const __default = getSymbol();
Object.defineProperty(exports, '__esModule', { value: true });
Object.assign(exports, __default);
exports.default = __default;
    
exports.getQuadVertex = getSymbol(\\"getQuadVertex\\");
/* __WGSL_LOADER_GENERATED */"
`;

exports[`shader transpiles wgsl to CJS 2`] = `
"const {decompressAST, bindEntryPoint} = require(\\"@use-gpu/shader/wgsl\\");
const m0 = require(\\"@use-gpu/wgsl/use/types.wgsl\\");
const m1 = require(\\"@use-gpu/wgsl/use/view.wgsl\\");
const m2 = require(\\"@use-gpu/wgsl/geometry/quad.wgsl\\");
const t = {\\"symbols\\":[\\"getPosition\\",\\"getColor\\",\\"getSize\\",\\"getDepth\\",\\"getQuadVertex\\"],\\"visibles\\":[\\"getQuadVertex\\"],\\"modules\\":[{\\"at\\":0,\\"name\\":\\"@use-gpu/wgsl/use/types\\",\\"symbols\\":[\\"SolidVertex\\"],\\"imports\\":[{\\"name\\":\\"SolidVertex\\",\\"imported\\":\\"SolidVertex\\"}]},{\\"at\\":0,\\"name\\":\\"@use-gpu/wgsl/use/view\\",\\"symbols\\":[\\"viewUniforms\\",\\"worldToClip\\",\\"getPerspectiveScale\\"],\\"imports\\":[{\\"name\\":\\"viewUniforms\\",\\"imported\\":\\"viewUniforms\\"},{\\"name\\":\\"worldToClip\\",\\"imported\\":\\"worldToClip\\"},{\\"name\\":\\"getPerspectiveScale\\",\\"imported\\":\\"getPerspectiveScale\\"}]},{\\"at\\":0,\\"name\\":\\"@use-gpu/wgsl/geometry/quad\\",\\"symbols\\":[\\"getQuadUV\\"],\\"imports\\":[{\\"name\\":\\"getQuadUV\\",\\"imported\\":\\"getQuadUV\\"}]}],\\"externals\\":[{\\"at\\":170,\\"symbol\\":\\"getPosition\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getPosition\\",\\"type\\":\\"vec4<f32>\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}},{\\"at\\":211,\\"symbol\\":\\"getColor\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getColor\\",\\"type\\":\\"vec4<f32>\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}},{\\"at\\":249,\\"symbol\\":\\"getSize\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getSize\\",\\"type\\":\\"vec2<f32>\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}},{\\"at\\":286,\\"symbol\\":\\"getDepth\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getDepth\\",\\"type\\":\\"f32\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}}],\\"exports\\":[{\\"at\\":318,\\"symbol\\":\\"getQuadVertex\\",\\"flags\\":1,\\"func\\":{\\"name\\":\\"getQuadVertex\\",\\"type\\":\\"SolidVertex\\",\\"attr\\":[\\"export\\"],\\"parameters\\":[{\\"name\\":\\"v\\",\\"type\\":\\"i32\\"},{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}],\\"identifiers\\":[\\"getPosition\\",\\"getColor\\",\\"getSize\\",\\"getDepth\\"]}}],\\"linkable\\":{\\"getPosition\\":true,\\"getColor\\":true,\\"getSize\\":true,\\"getDepth\\":true}}; const data = {
  \\"name\\": \\"/getQuadVertex\\",
  \\"code\\": \\" use '@use-gpu/wgsl/use/types'::{SolidVertex};use '@use-gpu/wgsl/use/view'::{viewUniforms,worldToClip,getPerspectiveScale};use '@use-gpu/wgsl/geometry/quad'::{getQuadUV};@link fn getPosition(i:i32)->vec4<f32>{};@link fn getColor(i:i32)->vec4<f32>{};@link fn getSize(i:i32)->vec2<f32>{};@link fn getDepth(i:i32)->f32{};@export fn getQuadVertex(v:i32,i:i32)->SolidVertex{var p=getPosition(i);var c=getColor(i);var s=getSize(i);var d=getDepth(i);var c1=worldToClip(p);var u=getQuadUV(v);var x=u*2.0-1.0;var p1=getPerspectiveScale(c1.w,d);s=s*p1;if(HAS_EDGE_BLEED){x=x*(s+0.5)/s;u=x*.5+.5;}c1=vec4<f32>(c1.xy+x*s*viewUniforms.viewResolution*c1.w,c1.zw);return SolidVertex(c1,c,u);}\\\\n\\",
  \\"hash\\": 2442059498946888,
  \\"table\\": t,
  \\"shake\\": [[170,[0,4]],[211,[1,4]],[249,[2,4]],[286,[3,4]],[318,[4]]],
  \\"tree\\": decompressAST([[1,1,45],[1,45,121],[1,77,123],[1,47,87],[1,41,78],[1,38,74],[1,37,68],[0,32,391],[1,0,7],[2,11,24],[2,14,15],[2,6,7],[2,8,19],[2,16,17],[2,2,13],[2,12,13],[2,7,8],[2,2,10],[2,9,10],[2,7,8],[2,2,9],[2,8,9],[2,7,8],[2,2,10],[2,9,10],[2,7,9],[2,3,14],[2,12,13],[2,7,8],[2,2,11],[2,10,11],[2,7,8],[2,2,3],[2,14,16],[2,3,22],[2,20,22],[2,5,6],[2,3,4],[2,2,3],[2,2,4],[2,6,20],[2,16,17],[2,2,3],[2,3,4],[2,7,8],[2,2,3],[2,2,3],[2,9,11],[2,13,15],[2,6,7],[2,2,3],[2,2,14],[2,28,30],[2,5,7],[2,14,25],[2,12,14],[2,3,4],[2,2,3]], t.symbols),
};

const libs = {\\"@use-gpu/wgsl/use/types\\": m0, \\"@use-gpu/wgsl/use/view\\": m1, \\"@use-gpu/wgsl/geometry/quad\\": m2};
const getSymbol = (entry) => ({module: bindEntryPoint(data, entry), libs});

const __default = getSymbol();
Object.defineProperty(exports, '__esModule', { value: true });
Object.assign(exports, __default);
exports.default = __default;
    
exports.getQuadVertex = getSymbol(\\"getQuadVertex\\");
/* __WGSL_LOADER_GENERATED */"
`;

exports[`shader transpiles wgsl to ES 1`] = `
"import {decompressAST, bindEntryPoint} from \\"@use-gpu/shader/wgsl\\";
import m0 from \\"@use-gpu/wgsl/use/types.wgsl\\";
import m1 from \\"@use-gpu/wgsl/use/view.wgsl\\";
import m2 from \\"@use-gpu/wgsl/geometry/quad.wgsl\\";
const t = {\\"symbols\\":[\\"getPosition\\",\\"getColor\\",\\"getSize\\",\\"getDepth\\",\\"getQuadVertex\\"],\\"visibles\\":[\\"getQuadVertex\\"],\\"modules\\":[{\\"at\\":0,\\"name\\":\\"@use-gpu/wgsl/use/types\\",\\"symbols\\":[\\"SolidVertex\\"],\\"imports\\":[{\\"name\\":\\"SolidVertex\\",\\"imported\\":\\"SolidVertex\\"}]},{\\"at\\":0,\\"name\\":\\"@use-gpu/wgsl/use/view\\",\\"symbols\\":[\\"viewUniforms\\",\\"worldToClip\\",\\"getPerspectiveScale\\"],\\"imports\\":[{\\"name\\":\\"viewUniforms\\",\\"imported\\":\\"viewUniforms\\"},{\\"name\\":\\"worldToClip\\",\\"imported\\":\\"worldToClip\\"},{\\"name\\":\\"getPerspectiveScale\\",\\"imported\\":\\"getPerspectiveScale\\"}]},{\\"at\\":0,\\"name\\":\\"@use-gpu/wgsl/geometry/quad\\",\\"symbols\\":[\\"getQuadUV\\"],\\"imports\\":[{\\"name\\":\\"getQuadUV\\",\\"imported\\":\\"getQuadUV\\"}]}],\\"externals\\":[{\\"at\\":182,\\"symbol\\":\\"getPosition\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getPosition\\",\\"type\\":\\"vec4<f32>\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}},{\\"at\\":228,\\"symbol\\":\\"getColor\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getColor\\",\\"type\\":\\"vec4<f32>\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}},{\\"at\\":271,\\"symbol\\":\\"getSize\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getSize\\",\\"type\\":\\"vec2<f32>\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}},{\\"at\\":313,\\"symbol\\":\\"getDepth\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getDepth\\",\\"type\\":\\"f32\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}}],\\"exports\\":[{\\"at\\":351,\\"symbol\\":\\"getQuadVertex\\",\\"flags\\":1,\\"func\\":{\\"name\\":\\"getQuadVertex\\",\\"type\\":\\"SolidVertex\\",\\"attr\\":[\\"export\\"],\\"parameters\\":[{\\"name\\":\\"vertexIndex\\",\\"type\\":\\"i32\\"},{\\"name\\":\\"instanceIndex\\",\\"type\\":\\"i32\\"}],\\"identifiers\\":[\\"getPosition\\",\\"getColor\\",\\"getSize\\",\\"getDepth\\"]}}],\\"linkable\\":{\\"getPosition\\":true,\\"getColor\\":true,\\"getSize\\":true,\\"getDepth\\":true}}; const data = {
  \\"name\\": \\"/getQuadVertex\\",
  \\"code\\": \\"\\\\nuse '@use-gpu/wgsl/use/types'::{ SolidVertex };\\\\nuse '@use-gpu/wgsl/use/view'::{ viewUniforms, worldToClip, getPerspectiveScale };\\\\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadUV };\\\\n\\\\n@link fn getPosition(i: i32) -> vec4<f32> {};\\\\n@link fn getColor(i: i32) -> vec4<f32> {};\\\\n@link fn getSize(i: i32) -> vec2<f32> {};\\\\n@link fn getDepth(i: i32) -> f32 {};\\\\n\\\\n@export fn getQuadVertex(vertexIndex: i32, instanceIndex: i32) -> SolidVertex {\\\\n  var position = getPosition(instanceIndex);\\\\n  var color = getColor(instanceIndex);\\\\n  var size = getSize(instanceIndex);\\\\n  var depth = getDepth(instanceIndex);\\\\n\\\\n  var center = worldToClip(position);\\\\n\\\\n  var uv = getQuadUV(vertexIndex);\\\\n  var xy = uv * 2.0 - 1.0;\\\\n\\\\n  // Lerp between fixed size and full perspective.\\\\n  var pixelScale = getPerspectiveScale(center.w, depth);\\\\n  // TODO: awaiting compound support\\\\n  //size *= pixelScale;\\\\n  size = size * pixelScale;\\\\n\\\\n  if (HAS_EDGE_BLEED) {\\\\n    xy = xy * (size + 0.5) / size;\\\\n    uv = xy * .5 + .5;\\\\n  }\\\\n\\\\n  // TODO: awaiting compound support\\\\n  //center.xy += xy * size * viewUniforms.viewResolution * center.w;\\\\n  center = vec4<f32>(center.xy + xy * size * viewUniforms.viewResolution * center.w, center.zw);\\\\n\\\\n  return SolidVertex(\\\\n    center,\\\\n    color,\\\\n    uv\\\\n  );\\\\n}\\\\n\\",
  \\"hash\\": 4146593418043979,
  \\"table\\": t,
  \\"shake\\": [[182,[0,4]],[228,[1,4]],[271,[2,4]],[313,[3,4]],[351,[4]]],
  \\"tree\\": decompressAST([[1,1,47],[1,48,128],[1,82,130],[1,51,95],[1,46,87],[1,43,83],[1,42,77],[0,38,928],[1,0,7],[2,11,24],[2,14,25],[2,18,31],[2,23,34],[2,20,28],[2,11,22],[2,12,25],[2,22,27],[2,8,16],[2,9,22],[2,22,26],[2,7,14],[2,8,21],[2,22,27],[2,8,16],[2,9,22],[2,23,29],[2,9,20],[2,12,20],[2,18,20],[2,5,14],[2,10,21],[2,20,22],[2,5,7],[2,74,84],[2,13,32],[2,20,26],[2,10,15],[2,71,75],[2,7,11],[2,7,17],[2,19,33],[2,22,24],[2,5,7],[2,6,10],[2,14,18],[2,10,12],[2,5,7],[2,127,133],[2,19,25],[2,12,14],[2,5,9],[2,7,19],[2,30,36],[2,10,16],[2,22,33],[2,17,23],[2,12,17],[2,11,13]], t.symbols),
};

const libs = {\\"@use-gpu/wgsl/use/types\\": m0, \\"@use-gpu/wgsl/use/view\\": m1, \\"@use-gpu/wgsl/geometry/quad\\": m2};
const getSymbol = (entry) => ({module: bindEntryPoint(data, entry), libs});
export default getSymbol();
export const getQuadVertex = getSymbol(\\"getQuadVertex\\");
/* __WGSL_LOADER_GENERATED */"
`;

exports[`shader transpiles wgsl to ES 2`] = `
"import {decompressAST, bindEntryPoint} from \\"@use-gpu/shader/wgsl\\";
import m0 from \\"@use-gpu/wgsl/use/types.wgsl\\";
import m1 from \\"@use-gpu/wgsl/use/view.wgsl\\";
import m2 from \\"@use-gpu/wgsl/geometry/quad.wgsl\\";
const t = {\\"symbols\\":[\\"getPosition\\",\\"getColor\\",\\"getSize\\",\\"getDepth\\",\\"getQuadVertex\\"],\\"visibles\\":[\\"getQuadVertex\\"],\\"modules\\":[{\\"at\\":0,\\"name\\":\\"@use-gpu/wgsl/use/types\\",\\"symbols\\":[\\"SolidVertex\\"],\\"imports\\":[{\\"name\\":\\"SolidVertex\\",\\"imported\\":\\"SolidVertex\\"}]},{\\"at\\":0,\\"name\\":\\"@use-gpu/wgsl/use/view\\",\\"symbols\\":[\\"viewUniforms\\",\\"worldToClip\\",\\"getPerspectiveScale\\"],\\"imports\\":[{\\"name\\":\\"viewUniforms\\",\\"imported\\":\\"viewUniforms\\"},{\\"name\\":\\"worldToClip\\",\\"imported\\":\\"worldToClip\\"},{\\"name\\":\\"getPerspectiveScale\\",\\"imported\\":\\"getPerspectiveScale\\"}]},{\\"at\\":0,\\"name\\":\\"@use-gpu/wgsl/geometry/quad\\",\\"symbols\\":[\\"getQuadUV\\"],\\"imports\\":[{\\"name\\":\\"getQuadUV\\",\\"imported\\":\\"getQuadUV\\"}]}],\\"externals\\":[{\\"at\\":170,\\"symbol\\":\\"getPosition\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getPosition\\",\\"type\\":\\"vec4<f32>\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}},{\\"at\\":211,\\"symbol\\":\\"getColor\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getColor\\",\\"type\\":\\"vec4<f32>\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}},{\\"at\\":249,\\"symbol\\":\\"getSize\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getSize\\",\\"type\\":\\"vec2<f32>\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}},{\\"at\\":286,\\"symbol\\":\\"getDepth\\",\\"flags\\":2,\\"func\\":{\\"name\\":\\"getDepth\\",\\"type\\":\\"f32\\",\\"attr\\":[\\"link\\"],\\"parameters\\":[{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}]}}],\\"exports\\":[{\\"at\\":318,\\"symbol\\":\\"getQuadVertex\\",\\"flags\\":1,\\"func\\":{\\"name\\":\\"getQuadVertex\\",\\"type\\":\\"SolidVertex\\",\\"attr\\":[\\"export\\"],\\"parameters\\":[{\\"name\\":\\"v\\",\\"type\\":\\"i32\\"},{\\"name\\":\\"i\\",\\"type\\":\\"i32\\"}],\\"identifiers\\":[\\"getPosition\\",\\"getColor\\",\\"getSize\\",\\"getDepth\\"]}}],\\"linkable\\":{\\"getPosition\\":true,\\"getColor\\":true,\\"getSize\\":true,\\"getDepth\\":true}}; const data = {
  \\"name\\": \\"/getQuadVertex\\",
  \\"code\\": \\" use '@use-gpu/wgsl/use/types'::{SolidVertex};use '@use-gpu/wgsl/use/view'::{viewUniforms,worldToClip,getPerspectiveScale};use '@use-gpu/wgsl/geometry/quad'::{getQuadUV};@link fn getPosition(i:i32)->vec4<f32>{};@link fn getColor(i:i32)->vec4<f32>{};@link fn getSize(i:i32)->vec2<f32>{};@link fn getDepth(i:i32)->f32{};@export fn getQuadVertex(v:i32,i:i32)->SolidVertex{var p=getPosition(i);var c=getColor(i);var s=getSize(i);var d=getDepth(i);var c1=worldToClip(p);var u=getQuadUV(v);var x=u*2.0-1.0;var p1=getPerspectiveScale(c1.w,d);s=s*p1;if(HAS_EDGE_BLEED){x=x*(s+0.5)/s;u=x*.5+.5;}c1=vec4<f32>(c1.xy+x*s*viewUniforms.viewResolution*c1.w,c1.zw);return SolidVertex(c1,c,u);}\\\\n\\",
  \\"hash\\": 2442059498946888,
  \\"table\\": t,
  \\"shake\\": [[170,[0,4]],[211,[1,4]],[249,[2,4]],[286,[3,4]],[318,[4]]],
  \\"tree\\": decompressAST([[1,1,45],[1,45,121],[1,77,123],[1,47,87],[1,41,78],[1,38,74],[1,37,68],[0,32,391],[1,0,7],[2,11,24],[2,14,15],[2,6,7],[2,8,19],[2,16,17],[2,2,13],[2,12,13],[2,7,8],[2,2,10],[2,9,10],[2,7,8],[2,2,9],[2,8,9],[2,7,8],[2,2,10],[2,9,10],[2,7,9],[2,3,14],[2,12,13],[2,7,8],[2,2,11],[2,10,11],[2,7,8],[2,2,3],[2,14,16],[2,3,22],[2,20,22],[2,5,6],[2,3,4],[2,2,3],[2,2,4],[2,6,20],[2,16,17],[2,2,3],[2,3,4],[2,7,8],[2,2,3],[2,2,3],[2,9,11],[2,13,15],[2,6,7],[2,2,3],[2,2,14],[2,28,30],[2,5,7],[2,14,25],[2,12,14],[2,3,4],[2,2,3]], t.symbols),
};

const libs = {\\"@use-gpu/wgsl/use/types\\": m0, \\"@use-gpu/wgsl/use/view\\": m1, \\"@use-gpu/wgsl/geometry/quad\\": m2};
const getSymbol = (entry) => ({module: bindEntryPoint(data, entry), libs});
export default getSymbol();
export const getQuadVertex = getSymbol(\\"getQuadVertex\\");
/* __WGSL_LOADER_GENERATED */"
`;
