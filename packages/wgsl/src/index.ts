// File generated by build.ts. Do not edit directly.
// This file provides all the shader code in a statically importable form, used for testing.
export const WGSLModules = {
  "fragment/pbr": "// https://www.shadertoy.com/view/XlKSDR\n\nlet PI = 3.141592;\nlet F_DIELECTRIC = 0.04;\n\nfn saturate(x: f32) -> f32 {\n  return max(x, 0.0);\n}\n\nfn pow5(x: f32) -> f32 {\n  var x2 = x * x;\n  return x2 * x2 * x;\n}\n\n// D - Normal distribution term\nfn ndfGGX2(cosTheta: f32, alpha: f32) -> f32 {\n  var alphaSqr = alpha * alpha;\n  var denom = cosTheta * cosTheta * (alphaSqr - 1.0) + 1.0f;\n  return alphaSqr / (PI * denom * denom);\n}\n\nfn ndfGGX(cosTheta: f32, alpha: f32) -> f32 {\n  var oneMinus = 1.0 - cosTheta * cosTheta;\n  var a = cosTheta * alpha;\n  var k = alpha / (oneMinus + a * a);\n  var d = k * k * (1.0 / PI);\n  return d;\n}\n\n// F - Schlick approximation of Fresnel\nfn fresnelSchlickVec3(cosTheta: f32, f0: vec3<f32>) -> vec3<f32> {\n  var ft = pow5(1.0 - cosTheta);\n  return f0 + (1.0 - f0) * ft;\n}\n\nfn fresnelSchlick(cosTheta: f32, f0: f32, f90: f32) -> f32 {\n  return f0 + (f90 - f0) * pow(1.0 - cosTheta, 5.0);\n}\n\nfn fdBurley(dotNL: f32, dotNV: f32, dotLH: f32, alpha: f32) -> f32 {\n  var f90 = 0.5 + 2.0 * alpha * dotLH * dotLH;\n  var lightScatter = fresnelSchlick(dotNL, 1.0, f90);\n  var viewScatter = fresnelSchlick(dotNV, 1.0, f90);\n  return lightScatter * viewScatter * (1.0 / PI);\n}\n\n// G - Geometric attenuation term\nfn smithGGXCorrelated(dotNL: f32, dotNV: f32, alpha: f32) -> f32 {\n  var a2 = alpha * alpha;\n  var GGXL = dotNV * sqrt((dotNL - a2 * dotNL) * dotNL + a2);\n  var GGXV = dotNL * sqrt((dotNV - a2 * dotNV) * dotNV + a2);\n  return 0.5 / (GGXL + GGXV);\n}\n\nfn G1X(dotNX: f32, k: f32) -> f32 {\n  return 1.0f / (dotNX * (1.0f - k) + k);\n}\n\nfn geometricGGX(dotNL: f32, dotNV: f32, alpha: f32) -> f32 {\n  var k = alpha / 2.0f;\n  return G1X(dotNL, k) * G1X(dotNV, k);\n}\n\n// N, L, V must be normalized\n@export fn PBR(\n  N: vec3<f32>,\n  L: vec3<f32>,\n  V: vec3<f32>,\n  albedo: vec3<f32>,\n  metalness: f32,\n  roughness: f32,\n) -> vec3<f32> {\n\n  var diffuseColor = albedo * (1.0 - metalness);\n  var F0 = mix(vec3(F_DIELECTRIC), albedo, metalness);\n\n  var alpha = roughness * roughness;\n  var dotNV = saturate(dot(N, V));\n\n  var radiance = 3.1415;\n\n  var H = normalize(V + L);\n  var dotNL = saturate(dot(N, L));\n  var dotNH = saturate(dot(N, H));\n  var dotLH = saturate(dot(L, H));\n\n  var F = fresnelSchlickVec3(dotLH, F0);\n  var D = ndfGGX(dotNH, alpha);\n  var G = smithGGXCorrelated(dotNL, dotNV, alpha);\n  //float G2 = geometricGGX(dotNL, dotNV, alpha);\n  \n  var Fd = albedo * fdBurley(dotNL, dotNV, dotLH, alpha);\n  var Fs = F * D * G;\n\n  var direct = (Fd + Fs) * radiance * dotNL;\n  return direct;\n}\n",
  "@use-gpu/wgsl/fragment/pbr": "// https://www.shadertoy.com/view/XlKSDR\n\nlet PI = 3.141592;\nlet F_DIELECTRIC = 0.04;\n\nfn saturate(x: f32) -> f32 {\n  return max(x, 0.0);\n}\n\nfn pow5(x: f32) -> f32 {\n  var x2 = x * x;\n  return x2 * x2 * x;\n}\n\n// D - Normal distribution term\nfn ndfGGX2(cosTheta: f32, alpha: f32) -> f32 {\n  var alphaSqr = alpha * alpha;\n  var denom = cosTheta * cosTheta * (alphaSqr - 1.0) + 1.0f;\n  return alphaSqr / (PI * denom * denom);\n}\n\nfn ndfGGX(cosTheta: f32, alpha: f32) -> f32 {\n  var oneMinus = 1.0 - cosTheta * cosTheta;\n  var a = cosTheta * alpha;\n  var k = alpha / (oneMinus + a * a);\n  var d = k * k * (1.0 / PI);\n  return d;\n}\n\n// F - Schlick approximation of Fresnel\nfn fresnelSchlickVec3(cosTheta: f32, f0: vec3<f32>) -> vec3<f32> {\n  var ft = pow5(1.0 - cosTheta);\n  return f0 + (1.0 - f0) * ft;\n}\n\nfn fresnelSchlick(cosTheta: f32, f0: f32, f90: f32) -> f32 {\n  return f0 + (f90 - f0) * pow(1.0 - cosTheta, 5.0);\n}\n\nfn fdBurley(dotNL: f32, dotNV: f32, dotLH: f32, alpha: f32) -> f32 {\n  var f90 = 0.5 + 2.0 * alpha * dotLH * dotLH;\n  var lightScatter = fresnelSchlick(dotNL, 1.0, f90);\n  var viewScatter = fresnelSchlick(dotNV, 1.0, f90);\n  return lightScatter * viewScatter * (1.0 / PI);\n}\n\n// G - Geometric attenuation term\nfn smithGGXCorrelated(dotNL: f32, dotNV: f32, alpha: f32) -> f32 {\n  var a2 = alpha * alpha;\n  var GGXL = dotNV * sqrt((dotNL - a2 * dotNL) * dotNL + a2);\n  var GGXV = dotNL * sqrt((dotNV - a2 * dotNV) * dotNV + a2);\n  return 0.5 / (GGXL + GGXV);\n}\n\nfn G1X(dotNX: f32, k: f32) -> f32 {\n  return 1.0f / (dotNX * (1.0f - k) + k);\n}\n\nfn geometricGGX(dotNL: f32, dotNV: f32, alpha: f32) -> f32 {\n  var k = alpha / 2.0f;\n  return G1X(dotNL, k) * G1X(dotNV, k);\n}\n\n// N, L, V must be normalized\n@export fn PBR(\n  N: vec3<f32>,\n  L: vec3<f32>,\n  V: vec3<f32>,\n  albedo: vec3<f32>,\n  metalness: f32,\n  roughness: f32,\n) -> vec3<f32> {\n\n  var diffuseColor = albedo * (1.0 - metalness);\n  var F0 = mix(vec3(F_DIELECTRIC), albedo, metalness);\n\n  var alpha = roughness * roughness;\n  var dotNV = saturate(dot(N, V));\n\n  var radiance = 3.1415;\n\n  var H = normalize(V + L);\n  var dotNL = saturate(dot(N, L));\n  var dotNH = saturate(dot(N, H));\n  var dotLH = saturate(dot(L, H));\n\n  var F = fresnelSchlickVec3(dotLH, F0);\n  var D = ndfGGX(dotNH, alpha);\n  var G = smithGGXCorrelated(dotNL, dotNV, alpha);\n  //float G2 = geometricGGX(dotNL, dotNV, alpha);\n  \n  var Fd = albedo * fdBurley(dotNL, dotNV, dotLH, alpha);\n  var Fs = F * D * G;\n\n  var direct = (Fd + Fs) * radiance * dotNL;\n  return direct;\n}\n",
  "fragment/sdf-2d": "@export struct SDF {\n  outer: f32,\n  inner: f32,\n};\n\n@export fn getUVScale(sdfUV: vec2<f32>) -> f32 {\n  var dx = dpdx(sdfUV);\n  var dy = dpdy(sdfUV);\n  return (length(dx) + length(dy)) * 0.5;\n}\n\n@export fn getBorderBoxSDF(box: vec2<f32>, uv: vec4<f32>, sdfUV: vec4<f32>, border: vec4<f32>) -> SDF {\n  var scale = getUVScale(sdfUV);\n\n  var nearest = round(uv);\n  var xy = (abs(uv - .5) - .5) * box;\n\n  var d1 = max(xy.x, xy.y);\n  var outer = 0.5 - d1;\n\n  var bs = mix(border.xy, border.zw, nearest);\n  var b = max(bs.x, bs.y);\n\n  xy = xy + bs;\n  var d2 = max(xy.x, xy.y);\n  var inner = 0.5 - d2;\n\n  return SDF(outer / scale, inner / scale);\n}\n\n@export fn getRoundedBorderBoxSDF(box: vec2<f32>, uv: vec4<f32>, sdfUV: vec4<f32>, border: vec4<f32>, radius: vec4<f32>) -> SDF {\n  var scale = getUVScale(sdfUV);\n\n  var nearest = round(uv);\n  var rs = mix(radius.xw, radius.yz, nearest.x);\n  var r = mix(rs.x, rs.y, nearest.y);\n\n  var bs = mix(border.xy, border.zw, nearest);\n  var b = max(bs.x, bs.y);\n\n  var xy = (abs(uv - .5) - .5) * box;\n\n  var clip = max(vec2<f32>(0.0), xy + r);\n  var neg = min(0.0, max(xy.x, xy.y) + r);\n\n  var outer: f32;\n  var inner: f32;\n  outer = r + 0.5 - length(clip) - neg;\n  inner = outer;\n  if (b > 0.0) {\n    xy = xy + bs;\n    r = max(0.0, r - b);\n\n    var clip = max(vec2<f32>(0.0), xy + r);\n    var neg = min(0.0, max(xy.x, xy.y) + r);\n    inner = r + 0.5 - length(clip) - neg;\n  }\n\n  return SDF(outer / scale, inner / scale);\n}\n",
  "@use-gpu/wgsl/fragment/sdf-2d": "@export struct SDF {\n  outer: f32,\n  inner: f32,\n};\n\n@export fn getUVScale(sdfUV: vec2<f32>) -> f32 {\n  var dx = dpdx(sdfUV);\n  var dy = dpdy(sdfUV);\n  return (length(dx) + length(dy)) * 0.5;\n}\n\n@export fn getBorderBoxSDF(box: vec2<f32>, uv: vec4<f32>, sdfUV: vec4<f32>, border: vec4<f32>) -> SDF {\n  var scale = getUVScale(sdfUV);\n\n  var nearest = round(uv);\n  var xy = (abs(uv - .5) - .5) * box;\n\n  var d1 = max(xy.x, xy.y);\n  var outer = 0.5 - d1;\n\n  var bs = mix(border.xy, border.zw, nearest);\n  var b = max(bs.x, bs.y);\n\n  xy = xy + bs;\n  var d2 = max(xy.x, xy.y);\n  var inner = 0.5 - d2;\n\n  return SDF(outer / scale, inner / scale);\n}\n\n@export fn getRoundedBorderBoxSDF(box: vec2<f32>, uv: vec4<f32>, sdfUV: vec4<f32>, border: vec4<f32>, radius: vec4<f32>) -> SDF {\n  var scale = getUVScale(sdfUV);\n\n  var nearest = round(uv);\n  var rs = mix(radius.xw, radius.yz, nearest.x);\n  var r = mix(rs.x, rs.y, nearest.y);\n\n  var bs = mix(border.xy, border.zw, nearest);\n  var b = max(bs.x, bs.y);\n\n  var xy = (abs(uv - .5) - .5) * box;\n\n  var clip = max(vec2<f32>(0.0), xy + r);\n  var neg = min(0.0, max(xy.x, xy.y) + r);\n\n  var outer: f32;\n  var inner: f32;\n  outer = r + 0.5 - length(clip) - neg;\n  inner = outer;\n  if (b > 0.0) {\n    xy = xy + bs;\n    r = max(0.0, r - b);\n\n    var clip = max(vec2<f32>(0.0), xy + r);\n    var neg = min(0.0, max(xy.x, xy.y) + r);\n    inner = r + 0.5 - length(clip) - neg;\n  }\n\n  return SDF(outer / scale, inner / scale);\n}\n",
  "geometry/arrow": "use '@use-gpu/wgsl/use/view'::{ getWorldScale };\n\nlet ARROW_ASPECT: f32 = 2.5;\n\nfn sqr(f: f32) -> f32 { return f * f; };\n\n@export fn getArrowSize(maxLength: f32, width: f32, size: f32, both: i32, w: f32, depth: f32) -> f32 {\n  if (w <= 0.0) { return 0.0; }\n  let worldScale = getWorldScale(w, depth);\n\n  let targetSize = size * width * worldScale * 0.5;\n  var maxSize = maxLength / ARROW_ASPECT;\n  if (both > 0) { maxSize = maxSize * 0.5; }\n\n  let ratio = maxSize / targetSize;\n  var finalSize = targetSize;\n  if (ratio < 2.0) { finalSize = targetSize * (1.0 - sqr(1.0 - ratio * 0.5)); }\n\n  return finalSize;\n};\n\n@export fn getArrowCorrection(w1: f32, w2: f32, depth: f32) -> f32 {\n  return mix(w1 / w2, 1.0, depth);\n};\n\n",
  "@use-gpu/wgsl/geometry/arrow": "use '@use-gpu/wgsl/use/view'::{ getWorldScale };\n\nlet ARROW_ASPECT: f32 = 2.5;\n\nfn sqr(f: f32) -> f32 { return f * f; };\n\n@export fn getArrowSize(maxLength: f32, width: f32, size: f32, both: i32, w: f32, depth: f32) -> f32 {\n  if (w <= 0.0) { return 0.0; }\n  let worldScale = getWorldScale(w, depth);\n\n  let targetSize = size * width * worldScale * 0.5;\n  var maxSize = maxLength / ARROW_ASPECT;\n  if (both > 0) { maxSize = maxSize * 0.5; }\n\n  let ratio = maxSize / targetSize;\n  var finalSize = targetSize;\n  if (ratio < 2.0) { finalSize = targetSize * (1.0 - sqr(1.0 - ratio * 0.5)); }\n\n  return finalSize;\n};\n\n@export fn getArrowCorrection(w1: f32, w2: f32, depth: f32) -> f32 {\n  return mix(w1 / w2, 1.0, depth);\n};\n\n",
  "geometry/line": "use '@use-gpu/wgsl/use/view'::{ viewUniforms };\n\n// segments\n//\n// o--o--o  o--o--o--o  o--o\n// 1  3  2  1  3  3  2  1  2\n\n@export fn getLineSegment(index: u32) -> i32 {\n  let n = u32(LINE_DETAIL + 1);\n  let i = index % n;\n  if (i == 0u) { return 1; }\n  if (i == n - 1u) { return 2; }\n  return 3;\n};\n\nfn turn(xy: vec2<f32>) -> vec2<f32> {\n  return vec2<f32>(xy.y, -xy.x);\n}\n\nfn slerp(d: f32, a: vec2<f32>, b: vec2<f32>, t: f32) -> vec2<f32> {\n  var th = acos(d);\n  var ab = sin(vec2((1.0 - t) * th, t * th));\n  return normalize(a * ab.x + b * ab.y);\n}\n\n@export fn lineJoinBevel(left: vec2<f32>, right: vec2<f32>, segment: i32, arc: f32) -> vec2<f32> {\n  if (arc > 0.0) { return right; }\n  return left;\n}\n\n@export fn lineJoinMiter(left: vec2<f32>, right: vec2<f32>, segment: i32, arc: f32) -> vec2<f32> {\n  var mid: vec2<f32>;\n  var scale = 1.0;\n\n  if (arc == 0.0) { return left; }\n  if (arc == 1.0) { return right; }\n\n  mid = normalize((left + right) / 2.0);\n  scale = min(2.0, 1.0 / max(0.001, dot(mid, left)));\n\n  return mid * scale;\n}\n\n@export fn lineJoinRound(left: vec2<f32>, right: vec2<f32>, segment: i32, arc: f32) -> vec2<f32> {\n  var mid: vec2<f32>;\n\n  if (arc == 0.0) { return left; }\n  if (arc == 1.0) { return right; }\n\n  var d = dot(left, right);\n  if (d > 0.999) { return left; }\n  return slerp(d, left, right, arc);\n}\n\n@export fn getLineJoin(\n  beforePoint: vec3<f32>,\n  centerPoint: vec3<f32>,\n  afterPoint: vec3<f32>,\n  arc: f32,\n  y: f32,\n  size: f32,\n  segment: i32,\n  style: i32,\n) -> vec3<f32> {\n  var before = beforePoint.xy * viewUniforms.viewSize;\n  var center = centerPoint.xy * viewUniforms.viewSize;\n  var after = afterPoint.xy * viewUniforms.viewSize;\n\n  var left = turn(normalize(center - before));\n  var right = turn(normalize(after - center));\n\n  var mid: vec2<f32>;\n  if (segment == 2) {\n    mid = left;\n  }\n  else if (segment == 1) {\n    mid = right;\n  }\n  else {\n    if (dot(left, right) < 0.999) {\n      var c = cross(vec3(left, 0.0), vec3(right, 0.0)).z;\n      if (c * y < 0.0) {\n        mid = lineJoinMiter(left, right, segment, arc);\n      }\n      else {\n        if (style == 0) { mid = lineJoinBevel(left, right, segment, arc); }\n        if (style == 1) { mid = lineJoinMiter(left, right, segment, arc); }\n        if (style == 2) { mid = lineJoinRound(left, right, segment, arc); }\n      }\n    }\n    else {\n      mid = left;\n    }\n  }\n\n  var offset = size * mid * y;\n  // TODO: awaiting compound support\n  //center += offset;\n  center = center + offset;\n\n  return vec3<f32>(center * viewUniforms.viewResolution, centerPoint.z);\n}\n",
  "@use-gpu/wgsl/geometry/line": "use '@use-gpu/wgsl/use/view'::{ viewUniforms };\n\n// segments\n//\n// o--o--o  o--o--o--o  o--o\n// 1  3  2  1  3  3  2  1  2\n\n@export fn getLineSegment(index: u32) -> i32 {\n  let n = u32(LINE_DETAIL + 1);\n  let i = index % n;\n  if (i == 0u) { return 1; }\n  if (i == n - 1u) { return 2; }\n  return 3;\n};\n\nfn turn(xy: vec2<f32>) -> vec2<f32> {\n  return vec2<f32>(xy.y, -xy.x);\n}\n\nfn slerp(d: f32, a: vec2<f32>, b: vec2<f32>, t: f32) -> vec2<f32> {\n  var th = acos(d);\n  var ab = sin(vec2((1.0 - t) * th, t * th));\n  return normalize(a * ab.x + b * ab.y);\n}\n\n@export fn lineJoinBevel(left: vec2<f32>, right: vec2<f32>, segment: i32, arc: f32) -> vec2<f32> {\n  if (arc > 0.0) { return right; }\n  return left;\n}\n\n@export fn lineJoinMiter(left: vec2<f32>, right: vec2<f32>, segment: i32, arc: f32) -> vec2<f32> {\n  var mid: vec2<f32>;\n  var scale = 1.0;\n\n  if (arc == 0.0) { return left; }\n  if (arc == 1.0) { return right; }\n\n  mid = normalize((left + right) / 2.0);\n  scale = min(2.0, 1.0 / max(0.001, dot(mid, left)));\n\n  return mid * scale;\n}\n\n@export fn lineJoinRound(left: vec2<f32>, right: vec2<f32>, segment: i32, arc: f32) -> vec2<f32> {\n  var mid: vec2<f32>;\n\n  if (arc == 0.0) { return left; }\n  if (arc == 1.0) { return right; }\n\n  var d = dot(left, right);\n  if (d > 0.999) { return left; }\n  return slerp(d, left, right, arc);\n}\n\n@export fn getLineJoin(\n  beforePoint: vec3<f32>,\n  centerPoint: vec3<f32>,\n  afterPoint: vec3<f32>,\n  arc: f32,\n  y: f32,\n  size: f32,\n  segment: i32,\n  style: i32,\n) -> vec3<f32> {\n  var before = beforePoint.xy * viewUniforms.viewSize;\n  var center = centerPoint.xy * viewUniforms.viewSize;\n  var after = afterPoint.xy * viewUniforms.viewSize;\n\n  var left = turn(normalize(center - before));\n  var right = turn(normalize(after - center));\n\n  var mid: vec2<f32>;\n  if (segment == 2) {\n    mid = left;\n  }\n  else if (segment == 1) {\n    mid = right;\n  }\n  else {\n    if (dot(left, right) < 0.999) {\n      var c = cross(vec3(left, 0.0), vec3(right, 0.0)).z;\n      if (c * y < 0.0) {\n        mid = lineJoinMiter(left, right, segment, arc);\n      }\n      else {\n        if (style == 0) { mid = lineJoinBevel(left, right, segment, arc); }\n        if (style == 1) { mid = lineJoinMiter(left, right, segment, arc); }\n        if (style == 2) { mid = lineJoinRound(left, right, segment, arc); }\n      }\n    }\n    else {\n      mid = left;\n    }\n  }\n\n  var offset = size * mid * y;\n  // TODO: awaiting compound support\n  //center += offset;\n  center = center + offset;\n\n  return vec3<f32>(center * viewUniforms.viewResolution, centerPoint.z);\n}\n",
  "geometry/quad": "let QUAD: array<vec2<u32>, 4> = array<vec2<u32>, 4>(\n  vec2<u32>(0u, 0u),\n  vec2<u32>(1u, 0u),\n  vec2<u32>(0u, 1u),\n  vec2<u32>(1u, 1u),\n);\n\n@export fn getQuadIndex(vertex: u32) -> vec2<u32> {\n  return QUAD[vertex];\n}\n\n@export fn getQuadUV(vertex: u32) -> vec2<f32> {\n  return vec2<f32>(getQuadIndex(vertex));\n}\n\n",
  "@use-gpu/wgsl/geometry/quad": "let QUAD: array<vec2<u32>, 4> = array<vec2<u32>, 4>(\n  vec2<u32>(0u, 0u),\n  vec2<u32>(1u, 0u),\n  vec2<u32>(0u, 1u),\n  vec2<u32>(1u, 1u),\n);\n\n@export fn getQuadIndex(vertex: u32) -> vec2<u32> {\n  return QUAD[vertex];\n}\n\n@export fn getQuadUV(vertex: u32) -> vec2<f32> {\n  return vec2<f32>(getQuadIndex(vertex));\n}\n\n",
  "geometry/strip": "@export fn getStripIndex(vertex: u32) -> vec2<u32> {\n  var x = vertex >> 1u;\n  var y = vertex & 1u;\n  return vec2<u32>(x, y);\n}\n\n@export fn getStripUV(vertex: u32) -> vec2<f32> {\n  return vec2<f32>(getStripIndex(vertex));\n}\n\n",
  "@use-gpu/wgsl/geometry/strip": "@export fn getStripIndex(vertex: u32) -> vec2<u32> {\n  var x = vertex >> 1u;\n  var y = vertex & 1u;\n  return vec2<u32>(x, y);\n}\n\n@export fn getStripUV(vertex: u32) -> vec2<f32> {\n  return vec2<f32>(getStripIndex(vertex));\n}\n\n",
  "instance/fragment/ui": "use '@use-gpu/wgsl/fragment/sdf-2d'::{ SDF, getUVScale };\n\n@external fn getTexture(uv: vec2<f32>) -> vec4<f32> {};\n \n@export fn getUIFragment(\n  uv: vec2<f32>,\n  textureUV: vec2<f32>,\n  sdfUV: vec2<f32>,\n  sdfConfig: vec4<f32>,\n  repeat: i32,\n  mode: i32,\n  layout: vec4<f32>,\n  radius: vec4<f32>,\n  border: vec4<f32>,\n  stroke: vec4<f32>,\n  fill: vec4<f32>,\n) -> vec4<f32> {\n  \n  var sdf: SDF;\n  let texture = getTexture(textureUV);\n\n  if (mode == -1) {\n    let sdfRadius = sdfConfig.x;\n    var expand = border.x;\n    \n    var scale = getUVScale(sdfUV);\n    var d = (texture.a - 0.75) * sdfRadius + 0.5;\n    var s = (d + expand) / scale;\n    sdf = SDF(s, s);\n  }\n\n  var mask = clamp(sdf.outer, 0.0, 1.0);\n\n  if (mask == 0.0) { discard; }\n\n  var color = fill;\n  if (sdf.outer != sdf.inner) { color = mix(stroke, fill, clamp(sdf.inner + (1.0 - mask), 0.0, 1.0)); }\n  \n  if (!ALPHA_TO_COVERAGE_ENABLED) {\n    color = color * fill.a;\n    color = color * mask;\n  }\n  else {\n    color = vec4<f32>(color.xyz, color.a * fill.a * mask);\n  }\n  \n\n  return color;  \n}\n",
  "@use-gpu/wgsl/instance/fragment/ui": "use '@use-gpu/wgsl/fragment/sdf-2d'::{ SDF, getUVScale };\n\n@external fn getTexture(uv: vec2<f32>) -> vec4<f32> {};\n \n@export fn getUIFragment(\n  uv: vec2<f32>,\n  textureUV: vec2<f32>,\n  sdfUV: vec2<f32>,\n  sdfConfig: vec4<f32>,\n  repeat: i32,\n  mode: i32,\n  layout: vec4<f32>,\n  radius: vec4<f32>,\n  border: vec4<f32>,\n  stroke: vec4<f32>,\n  fill: vec4<f32>,\n) -> vec4<f32> {\n  \n  var sdf: SDF;\n  let texture = getTexture(textureUV);\n\n  if (mode == -1) {\n    let sdfRadius = sdfConfig.x;\n    var expand = border.x;\n    \n    var scale = getUVScale(sdfUV);\n    var d = (texture.a - 0.75) * sdfRadius + 0.5;\n    var s = (d + expand) / scale;\n    sdf = SDF(s, s);\n  }\n\n  var mask = clamp(sdf.outer, 0.0, 1.0);\n\n  if (mask == 0.0) { discard; }\n\n  var color = fill;\n  if (sdf.outer != sdf.inner) { color = mix(stroke, fill, clamp(sdf.inner + (1.0 - mask), 0.0, 1.0)); }\n  \n  if (!ALPHA_TO_COVERAGE_ENABLED) {\n    color = color * fill.a;\n    color = color * mask;\n  }\n  else {\n    color = vec4<f32>(color.xyz, color.a * fill.a * mask);\n  }\n  \n\n  return color;  \n}\n",
  "instance/identity": "@export fn getIndex(i: u32) -> { return i; }",
  "@use-gpu/wgsl/instance/identity": "@export fn getIndex(i: u32) -> { return i; }",
  "instance/vertex/arrow": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/use/view'::{ worldToClip, worldToClip3D };\nuse '@use-gpu/wgsl/geometry/arrow'::{ getArrowSize, getArrowCorrection };\n\n@external fn getVertex(i: u32) -> vec4<f32> {};\n\n@external fn getAnchor(i: u32) -> vec4<u32> {};\n\n@external fn getPosition(i: u32) -> vec4<f32> {};\n@external fn getColor(i: u32) -> vec4<f32> {};\n@external fn getSize(i: u32) -> f32 {};\n@external fn getWidth(i: u32) -> f32 {};\n@external fn getDepth(i: u32) -> f32 {};\n  \nlet ARROW_ASPECT: f32 = 2.5;\n\n@export fn getArrowVertex(vertexIndex: u32, instanceIndex: u32) -> SolidVertex {\n  var NaN: f32 = bitcast<f32>(0xffffffffu);\n\n  let meshPosition = getVertex(vertexIndex);\n  \n  let anchor = getAnchor(instanceIndex);\n  let anchorIndex = anchor.x;\n  let nextIndex = anchor.y;\n  let endIndex = anchor.z;\n  let both = i32(anchor.w);\n  \n  let color = getColor(anchorIndex);\n  let size = getSize(anchorIndex);\n  let width = getWidth(anchorIndex);\n  let depth = getDepth(anchorIndex);\n\n  let startPos = getPosition(anchorIndex);\n  let nextPos = getPosition(nextIndex);\n  let midPos = getPosition((anchorIndex + endIndex) / 2u);\n  let endPos = getPosition(endIndex);\n\n  let center = worldToClip(startPos);\n\n  let maxLength = length(endPos.xyz - midPos.xyz) + length(midPos.xyz - startPos.xyz);\n  let arrowSize = getArrowSize(maxLength, width, size, both, center.w, depth);\n\n  let t = normalize(nextPos.xyz - startPos.xyz);\n\n  var u: vec3<f32>;\n  if (abs(t.z) > 0.5) { u = vec3<f32>(1.0, 0.0, 0.0); }\n  else { u = vec3<f32>(0.0, 0.0, 1.0); };\n\n  let n = normalize(cross(t, u));\n  let b = cross(t, n);\n\n  let m = mat4x4<f32>(\n    vec4<f32>(t.xyz, 0.0),\n    vec4<f32>(b.xyz, 0.0),\n    vec4<f32>(n.xyz, 0.0),\n    vec4<f32>(0.0, 0.0, 0.0, 1.0),\n  );\n\n  let offset = vec4<f32>(t.xyz, 0.0) * (ARROW_ASPECT * arrowSize);\n  let cap = worldToClip(startPos + offset);\n  let arrowRadius = getArrowCorrection(cap.w, center.w, depth);\n\n  //let position = vec4<f32>(meshPosition.xyz * finalSize + startPos.xyz, 1.0);\n  let uv = vec2<f32>(f32(anchorIndex), 0.0);\n\n  let orientedPos = m * vec4<f32>(vec3<f32>(meshPosition.x, meshPosition.yz * arrowRadius) * arrowSize, 1.0);\n  let finalPos = vec4<f32>(orientedPos.xyz + startPos.xyz, 1.0);\n  let position = worldToClip(finalPos);\n\n  return SolidVertex(\n    position,\n    color,\n    uv,\n    instanceIndex,\n  );\n}\n",
  "@use-gpu/wgsl/instance/vertex/arrow": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/use/view'::{ worldToClip, worldToClip3D };\nuse '@use-gpu/wgsl/geometry/arrow'::{ getArrowSize, getArrowCorrection };\n\n@external fn getVertex(i: u32) -> vec4<f32> {};\n\n@external fn getAnchor(i: u32) -> vec4<u32> {};\n\n@external fn getPosition(i: u32) -> vec4<f32> {};\n@external fn getColor(i: u32) -> vec4<f32> {};\n@external fn getSize(i: u32) -> f32 {};\n@external fn getWidth(i: u32) -> f32 {};\n@external fn getDepth(i: u32) -> f32 {};\n  \nlet ARROW_ASPECT: f32 = 2.5;\n\n@export fn getArrowVertex(vertexIndex: u32, instanceIndex: u32) -> SolidVertex {\n  var NaN: f32 = bitcast<f32>(0xffffffffu);\n\n  let meshPosition = getVertex(vertexIndex);\n  \n  let anchor = getAnchor(instanceIndex);\n  let anchorIndex = anchor.x;\n  let nextIndex = anchor.y;\n  let endIndex = anchor.z;\n  let both = i32(anchor.w);\n  \n  let color = getColor(anchorIndex);\n  let size = getSize(anchorIndex);\n  let width = getWidth(anchorIndex);\n  let depth = getDepth(anchorIndex);\n\n  let startPos = getPosition(anchorIndex);\n  let nextPos = getPosition(nextIndex);\n  let midPos = getPosition((anchorIndex + endIndex) / 2u);\n  let endPos = getPosition(endIndex);\n\n  let center = worldToClip(startPos);\n\n  let maxLength = length(endPos.xyz - midPos.xyz) + length(midPos.xyz - startPos.xyz);\n  let arrowSize = getArrowSize(maxLength, width, size, both, center.w, depth);\n\n  let t = normalize(nextPos.xyz - startPos.xyz);\n\n  var u: vec3<f32>;\n  if (abs(t.z) > 0.5) { u = vec3<f32>(1.0, 0.0, 0.0); }\n  else { u = vec3<f32>(0.0, 0.0, 1.0); };\n\n  let n = normalize(cross(t, u));\n  let b = cross(t, n);\n\n  let m = mat4x4<f32>(\n    vec4<f32>(t.xyz, 0.0),\n    vec4<f32>(b.xyz, 0.0),\n    vec4<f32>(n.xyz, 0.0),\n    vec4<f32>(0.0, 0.0, 0.0, 1.0),\n  );\n\n  let offset = vec4<f32>(t.xyz, 0.0) * (ARROW_ASPECT * arrowSize);\n  let cap = worldToClip(startPos + offset);\n  let arrowRadius = getArrowCorrection(cap.w, center.w, depth);\n\n  //let position = vec4<f32>(meshPosition.xyz * finalSize + startPos.xyz, 1.0);\n  let uv = vec2<f32>(f32(anchorIndex), 0.0);\n\n  let orientedPos = m * vec4<f32>(vec3<f32>(meshPosition.x, meshPosition.yz * arrowRadius) * arrowSize, 1.0);\n  let finalPos = vec4<f32>(orientedPos.xyz + startPos.xyz, 1.0);\n  let position = worldToClip(finalPos);\n\n  return SolidVertex(\n    position,\n    color,\n    uv,\n    instanceIndex,\n  );\n}\n",
  "instance/vertex/full-screen": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadUV };\nuse '@use-gpu/wgsl/use/view'::{ viewUniforms };\n\n@export fn getFullScreenVertex(vertexIndex: u32, instanceIndex: u32) -> SolidVertex {\n  var uv = getQuadUV(vertexIndex);\n  var xy = uv * 2.0 - 1.0;\n  \n  var zz = viewUniforms.viewSize;\n  \n  return SolidVertex(\n    vec4<f32>(xy.x, -xy.y, 0.5, 1.0),\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\n    uv,\n    instanceIndex,\n  );\n}",
  "@use-gpu/wgsl/instance/vertex/full-screen": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadUV };\nuse '@use-gpu/wgsl/use/view'::{ viewUniforms };\n\n@export fn getFullScreenVertex(vertexIndex: u32, instanceIndex: u32) -> SolidVertex {\n  var uv = getQuadUV(vertexIndex);\n  var xy = uv * 2.0 - 1.0;\n  \n  var zz = viewUniforms.viewSize;\n  \n  return SolidVertex(\n    vec4<f32>(xy.x, -xy.y, 0.5, 1.0),\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\n    uv,\n    instanceIndex,\n  );\n}",
  "instance/vertex/label": "use '@use-gpu/wgsl/use/types'::{ UIVertex };\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadUV };\nuse '@use-gpu/wgsl/use/view'::{ viewUniforms, worldToClip, getPerspectiveScale }; \n\n@external fn getIndex(i: u32) -> u32 {};\n@external fn getRectangle(i: u32) -> vec4<f32> {};\n@external fn getUV(i: u32) -> vec2<f32> {};\n@external fn getLayout(i: u32) -> vec2<f32> {};\n\n@external fn getPosition(i: i32) -> vec4<f32> {};\n@external fn getPlacement(i: u32) -> vec2<f32> {};\n@external fn getOffset(i: u32) -> f32 {};\n@external fn getSize(i: u32) -> f32 {};\n@external fn getDepth(i: i32) -> f32 {};\n@external fn getColor(i: u32) -> f32 {};\n@external fn getExpand(i: u32) -> f32 {};\n// @external fn getFlip(i: u32) -> f32;\n\n@external fn getSDFConfig(i: u32) -> vec2<f32> {};\n\n@export fn getLabelVertex(vertexIndex: u32, instanceIndex: u32) -> UIVertex {\n\n  var sdfConfig = getSDFConfig(instanceIndex);\n  var fontSize = sdfConfig.z;\n\n  var index = getIndex(instanceIndex);\n  var rectangle = getRectangle(instanceIndex);\n  var uv4 = getUV(instanceIndex);\n\n  var position = getPosition(index);\n  var placement = getPlacement(index);\n  var layout = getLayout(index);\n  var offset = getOffset(index);\n  var size = getSize(index);\n  var depth = getDepth(index);\n  var color = getColor(index);\n  var expand = getExpand(index);\n  // var flip = getFlip(index);\n\n  var center = worldToClip(position);\n  \n  // Lay out quad\n  var uv1 = getQuadUV(vertexIndex);\n  var xy1 = uv1 * 2.0 - 1.0;\n  var origin = ((placement - 1.0) * 0.5 * layout) + (offset * placement);\n\n  // Lerp between fixed size and full perspective.\n  var pixelScale = getPerspectiveScale(center.w, depth);\n\n  // Factor in relative font and atlas scale\n  var glyphScale = size / fontSize;\n  var finalScale = pixelScale * glyphScale;\n\n  // Apply half pixel edge bleed on XY and UV\n  var xy: vec2<f32>;\n  var uv: vec2<f32>;\n  /*\n  if (HAS_EDGE_BLEED) {\n    let bleed = 0.5;\n    var ul = (rectangle.xy + origin) * finalScale - bleed;\n    var br = (rectangle.zw + origin) * finalScale + bleed;\n    var wh = (rectangle.zw - rectangle.xy) * finalScale;\n\n    xy = mix(ul, br, uv1);\n    uv = mix(uv4.xy, uv4.zw, uv1 + xy1 * bleed / wh);\n  }\n  else {\n  */\n    xy = mix(rectangle.xy + origin, rectangle.zw + origin, uv1) * finalScale;\n    uv = mix(uv4.xy, uv4.zw, uv1);\n  // }\n\n  xy = xy * vec2<f32>(1.0, -1.0);\n\n  // Attach to position\n  center = vec4<f32>(center.xy + 2.0 * xy * viewUniforms.viewResolution * center.w, center.zw);\n  \n  let sdfUV = uv;\n  let textureUV = uv;\n  let box = rectangle.zw - rectangle.xy;\n\n  return UIVertex(\n    center,\n    uv1,\n    sdfConfig,\n    sdfUV,\n    textureUV,\n    0,\n    -1,\n    vec4<f32>(layout, 0.0, 0.0),\n    vec4<f32>(0.0),\n    vec4<f32>(expand, 0.0, 0.0, 0.0),\n    vec4<f32>(0.0),\n    color,\n    instanceIndex,\n  );\n}",
  "@use-gpu/wgsl/instance/vertex/label": "use '@use-gpu/wgsl/use/types'::{ UIVertex };\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadUV };\nuse '@use-gpu/wgsl/use/view'::{ viewUniforms, worldToClip, getPerspectiveScale }; \n\n@external fn getIndex(i: u32) -> u32 {};\n@external fn getRectangle(i: u32) -> vec4<f32> {};\n@external fn getUV(i: u32) -> vec2<f32> {};\n@external fn getLayout(i: u32) -> vec2<f32> {};\n\n@external fn getPosition(i: i32) -> vec4<f32> {};\n@external fn getPlacement(i: u32) -> vec2<f32> {};\n@external fn getOffset(i: u32) -> f32 {};\n@external fn getSize(i: u32) -> f32 {};\n@external fn getDepth(i: i32) -> f32 {};\n@external fn getColor(i: u32) -> f32 {};\n@external fn getExpand(i: u32) -> f32 {};\n// @external fn getFlip(i: u32) -> f32;\n\n@external fn getSDFConfig(i: u32) -> vec2<f32> {};\n\n@export fn getLabelVertex(vertexIndex: u32, instanceIndex: u32) -> UIVertex {\n\n  var sdfConfig = getSDFConfig(instanceIndex);\n  var fontSize = sdfConfig.z;\n\n  var index = getIndex(instanceIndex);\n  var rectangle = getRectangle(instanceIndex);\n  var uv4 = getUV(instanceIndex);\n\n  var position = getPosition(index);\n  var placement = getPlacement(index);\n  var layout = getLayout(index);\n  var offset = getOffset(index);\n  var size = getSize(index);\n  var depth = getDepth(index);\n  var color = getColor(index);\n  var expand = getExpand(index);\n  // var flip = getFlip(index);\n\n  var center = worldToClip(position);\n  \n  // Lay out quad\n  var uv1 = getQuadUV(vertexIndex);\n  var xy1 = uv1 * 2.0 - 1.0;\n  var origin = ((placement - 1.0) * 0.5 * layout) + (offset * placement);\n\n  // Lerp between fixed size and full perspective.\n  var pixelScale = getPerspectiveScale(center.w, depth);\n\n  // Factor in relative font and atlas scale\n  var glyphScale = size / fontSize;\n  var finalScale = pixelScale * glyphScale;\n\n  // Apply half pixel edge bleed on XY and UV\n  var xy: vec2<f32>;\n  var uv: vec2<f32>;\n  /*\n  if (HAS_EDGE_BLEED) {\n    let bleed = 0.5;\n    var ul = (rectangle.xy + origin) * finalScale - bleed;\n    var br = (rectangle.zw + origin) * finalScale + bleed;\n    var wh = (rectangle.zw - rectangle.xy) * finalScale;\n\n    xy = mix(ul, br, uv1);\n    uv = mix(uv4.xy, uv4.zw, uv1 + xy1 * bleed / wh);\n  }\n  else {\n  */\n    xy = mix(rectangle.xy + origin, rectangle.zw + origin, uv1) * finalScale;\n    uv = mix(uv4.xy, uv4.zw, uv1);\n  // }\n\n  xy = xy * vec2<f32>(1.0, -1.0);\n\n  // Attach to position\n  center = vec4<f32>(center.xy + 2.0 * xy * viewUniforms.viewResolution * center.w, center.zw);\n  \n  let sdfUV = uv;\n  let textureUV = uv;\n  let box = rectangle.zw - rectangle.xy;\n\n  return UIVertex(\n    center,\n    uv1,\n    sdfConfig,\n    sdfUV,\n    textureUV,\n    0,\n    -1,\n    vec4<f32>(layout, 0.0, 0.0),\n    vec4<f32>(0.0),\n    vec4<f32>(expand, 0.0, 0.0, 0.0),\n    vec4<f32>(0.0),\n    color,\n    instanceIndex,\n  );\n}",
  "instance/vertex/line": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/use/view'::{ viewUniforms, worldToClip, worldToView, viewToClip, toClip3D, clipLineIntoView, getPerspectiveScale };\nuse '@use-gpu/wgsl/geometry/strip'::{ getStripIndex };\nuse '@use-gpu/wgsl/geometry/line'::{ getLineJoin };\nuse '@use-gpu/wgsl/geometry/arrow'::{ getArrowSize };\n\n@external fn getPosition(i: u32) -> vec4<f32> {};\n@external fn getSegment(i: u32) -> i32 {};\n@external fn getColor(i: u32) -> vec4<f32> {};\n@external fn getWidth(i: u32) -> f32 {};\n@external fn getDepth(i: u32) -> f32 {};\n  \n@external fn getTrim(i: u32) -> vec4<u32> {};\n@external fn getSize(i: u32) -> vec2<f32> {};\n\nlet ARROW_ASPECT: f32 = 2.5;\n\nfn getAnchorDistance(anchor: vec3<f32>, tangent: vec3<f32>, center: vec3<f32>) -> f32 {\n  var diff = center - anchor;\n\n  var distance = dot(diff, tangent);\n  var align = dot(normalize(diff), tangent);\n\n  if (length(diff) == 0.0) { return 0.0; }\n  else if (align > 0.92) { return distance; }\n  else { return -1.0; }\n}\n\nfn trimAnchor(\n  maxLength: f32,\n  anchor: vec3<f32>,\n  next: vec3<f32>,\n  center: vec3<f32>,\n  after: vec3<f32>,\n  width: f32,\n  size: f32,\n  both: i32,\n  w: f32,\n  depth: f32,\n) -> vec3<f32> {\n  var NaN: f32 = bitcast<f32>(0xffffffffu);\n\n  var tangent = normalize(next - anchor);\n  var distanceStart = getAnchorDistance(anchor, tangent, center);\n  var distanceEnd = getAnchorDistance(anchor, tangent, after);\n\n  var arrowLength = getArrowSize(maxLength, width, size, both, w, depth) * ARROW_ASPECT;\n\n  if (distanceStart >= 0.0 && distanceStart < arrowLength) {\n    if (distanceEnd >= 0.0 && distanceEnd < arrowLength) {\n      return vec3<f32>(NaN, NaN, NaN);\n    }\n    else {\n      let ratio = (arrowLength - distanceStart) / (distanceEnd - distanceStart);\n      return mix(center, after, ratio);\n    }\n  }\n\n  return center;\n}\n\n@export fn getLineVertex(vertexIndex: u32, instanceIndex: u32) -> SolidVertex {\n  var NaN: f32 = bitcast<f32>(0xffffffffu);\n\n  var ij = getStripIndex(vertexIndex);\n\n  var segmentLeft = getSegment(instanceIndex);\n  if (segmentLeft == 0 || segmentLeft == 2) {\n    return SolidVertex(\n      vec4(NaN, NaN, NaN, NaN),\n      vec4(NaN, NaN, NaN, NaN),\n      vec2(NaN, NaN),\n      0u,\n    );\n  }\n\n  var uv = vec2<f32>(ij);\n  var xy = uv * 2.0 - 1.0;\n\n  var cornerIndex: u32;\n  var joinIndex: u32;\n  if (ij.x == 0u) {\n    joinIndex = u32(LINE_JOIN_SIZE);\n    cornerIndex = instanceIndex;\n  }\n  else {\n    joinIndex = ij.x - 1u;\n    cornerIndex = instanceIndex + 1u;\n  }\n\n  var trim = getTrim(instanceIndex);\n  var trimMode = i32(trim.z);\n\n  var segment = getSegment(cornerIndex);\n  var color = getColor(cornerIndex);\n  var width = getWidth(cornerIndex);\n  var depth = getDepth(cornerIndex);\n\n  var centerPos = getPosition(cornerIndex);\n  var beforePos = centerPos;\n  var afterPos = centerPos;\n\n  if (segment != 1) { beforePos = getPosition(cornerIndex - 1u); }\n  else { trimMode = trimMode & 1; }\n  if (segment != 2) { afterPos = getPosition(cornerIndex + 1u); }\n  else { trimMode = trimMode & 2; }\n\n  // Trim from end points\n  if (trimMode > 0) {\n    var size = getSize(cornerIndex);\n\n    var startIndex = trim.x;\n    var endIndex = trim.y;\n    var midIndex = (startIndex + endIndex) / 2u;\n\n    var startPos = getPosition(startIndex);\n    var midPos = getPosition(midIndex);\n    var endPos = getPosition(endIndex);\n\n    let maxLength = length(endPos.xyz - midPos.xyz) + length(midPos.xyz - startPos.xyz);\n\n    var both = 0;\n    if (trimMode == 3) { both = 1; }\n\n    if ((trimMode & 1) != 0) {\n      var start = worldToClip(startPos);\n      if (start.w > 0.0) {\n        var nextPos = getPosition(trim.x + 1u);\n        var trimmed = trimAnchor(maxLength, startPos.xyz, nextPos.xyz, centerPos.xyz, afterPos.xyz, width, size, both, start.w, depth);\n        centerPos = vec4<f32>(trimmed, 1.0);\n      }\n    }\n    if ((trimMode & 2) != 0) {\n      var end = worldToClip(endPos);\n      if (end.w > 0.0) {\n        var nextPos = getPosition(trim.y - 1u);\n        var trimmed = trimAnchor(maxLength, endPos.xyz, nextPos.xyz, centerPos.xyz, beforePos.xyz, width, size, both, end.w, depth);\n        centerPos = vec4<f32>(trimmed, 1.0);\n      }\n    }\n  }\n\n  // Clip ends into view\n  var near = viewUniforms.viewNearFar.x * 2.0;\n  var clipBeforeV = clipLineIntoView(beforePos, centerPos, near);\n  var clipAfterV  = clipLineIntoView(afterPos, centerPos, near);\n\n  var before = toClip3D(viewToClip(clipBeforeV));\n  var after  = toClip3D(viewToClip(clipAfterV));\n\n  var centerV = worldToView(centerPos);\n  var center4 = viewToClip(centerV);\n\n  if (center4.w <= 0.0) {\n    if (ij.x == 0u) {\n      centerV = clipLineIntoView(centerPos, afterPos, near);\n    }\n    else if (ij.x != 0u) {\n      centerV = clipLineIntoView(centerPos, beforePos, near);\n    }\n    else {\n      return SolidVertex(\n        vec4(NaN, NaN, NaN, NaN),\n        vec4(NaN, NaN, NaN, NaN),\n        vec2(NaN, NaN),\n        instanceIndex,\n      );\n    }\n    center4 = viewToClip(centerV);\n  }\n\n  var center = toClip3D(center4);\n\n  // Lerp between fixed size and full perspective\n  var pixelScale = getPerspectiveScale(center4.w, depth);\n  width = width * pixelScale;\n\n  var arc = f32(joinIndex) / f32(LINE_JOIN_SIZE);\n  var lineJoin = getLineJoin(before, center, after, arc, xy.y, width, segment, LINE_JOIN_STYLE);\n\n  return SolidVertex(\n    vec4<f32>(lineJoin, 1.0),\n    color,\n    uv,\n    instanceIndex,\n  );\n}\n",
  "@use-gpu/wgsl/instance/vertex/line": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/use/view'::{ viewUniforms, worldToClip, worldToView, viewToClip, toClip3D, clipLineIntoView, getPerspectiveScale };\nuse '@use-gpu/wgsl/geometry/strip'::{ getStripIndex };\nuse '@use-gpu/wgsl/geometry/line'::{ getLineJoin };\nuse '@use-gpu/wgsl/geometry/arrow'::{ getArrowSize };\n\n@external fn getPosition(i: u32) -> vec4<f32> {};\n@external fn getSegment(i: u32) -> i32 {};\n@external fn getColor(i: u32) -> vec4<f32> {};\n@external fn getWidth(i: u32) -> f32 {};\n@external fn getDepth(i: u32) -> f32 {};\n  \n@external fn getTrim(i: u32) -> vec4<u32> {};\n@external fn getSize(i: u32) -> vec2<f32> {};\n\nlet ARROW_ASPECT: f32 = 2.5;\n\nfn getAnchorDistance(anchor: vec3<f32>, tangent: vec3<f32>, center: vec3<f32>) -> f32 {\n  var diff = center - anchor;\n\n  var distance = dot(diff, tangent);\n  var align = dot(normalize(diff), tangent);\n\n  if (length(diff) == 0.0) { return 0.0; }\n  else if (align > 0.92) { return distance; }\n  else { return -1.0; }\n}\n\nfn trimAnchor(\n  maxLength: f32,\n  anchor: vec3<f32>,\n  next: vec3<f32>,\n  center: vec3<f32>,\n  after: vec3<f32>,\n  width: f32,\n  size: f32,\n  both: i32,\n  w: f32,\n  depth: f32,\n) -> vec3<f32> {\n  var NaN: f32 = bitcast<f32>(0xffffffffu);\n\n  var tangent = normalize(next - anchor);\n  var distanceStart = getAnchorDistance(anchor, tangent, center);\n  var distanceEnd = getAnchorDistance(anchor, tangent, after);\n\n  var arrowLength = getArrowSize(maxLength, width, size, both, w, depth) * ARROW_ASPECT;\n\n  if (distanceStart >= 0.0 && distanceStart < arrowLength) {\n    if (distanceEnd >= 0.0 && distanceEnd < arrowLength) {\n      return vec3<f32>(NaN, NaN, NaN);\n    }\n    else {\n      let ratio = (arrowLength - distanceStart) / (distanceEnd - distanceStart);\n      return mix(center, after, ratio);\n    }\n  }\n\n  return center;\n}\n\n@export fn getLineVertex(vertexIndex: u32, instanceIndex: u32) -> SolidVertex {\n  var NaN: f32 = bitcast<f32>(0xffffffffu);\n\n  var ij = getStripIndex(vertexIndex);\n\n  var segmentLeft = getSegment(instanceIndex);\n  if (segmentLeft == 0 || segmentLeft == 2) {\n    return SolidVertex(\n      vec4(NaN, NaN, NaN, NaN),\n      vec4(NaN, NaN, NaN, NaN),\n      vec2(NaN, NaN),\n      0u,\n    );\n  }\n\n  var uv = vec2<f32>(ij);\n  var xy = uv * 2.0 - 1.0;\n\n  var cornerIndex: u32;\n  var joinIndex: u32;\n  if (ij.x == 0u) {\n    joinIndex = u32(LINE_JOIN_SIZE);\n    cornerIndex = instanceIndex;\n  }\n  else {\n    joinIndex = ij.x - 1u;\n    cornerIndex = instanceIndex + 1u;\n  }\n\n  var trim = getTrim(instanceIndex);\n  var trimMode = i32(trim.z);\n\n  var segment = getSegment(cornerIndex);\n  var color = getColor(cornerIndex);\n  var width = getWidth(cornerIndex);\n  var depth = getDepth(cornerIndex);\n\n  var centerPos = getPosition(cornerIndex);\n  var beforePos = centerPos;\n  var afterPos = centerPos;\n\n  if (segment != 1) { beforePos = getPosition(cornerIndex - 1u); }\n  else { trimMode = trimMode & 1; }\n  if (segment != 2) { afterPos = getPosition(cornerIndex + 1u); }\n  else { trimMode = trimMode & 2; }\n\n  // Trim from end points\n  if (trimMode > 0) {\n    var size = getSize(cornerIndex);\n\n    var startIndex = trim.x;\n    var endIndex = trim.y;\n    var midIndex = (startIndex + endIndex) / 2u;\n\n    var startPos = getPosition(startIndex);\n    var midPos = getPosition(midIndex);\n    var endPos = getPosition(endIndex);\n\n    let maxLength = length(endPos.xyz - midPos.xyz) + length(midPos.xyz - startPos.xyz);\n\n    var both = 0;\n    if (trimMode == 3) { both = 1; }\n\n    if ((trimMode & 1) != 0) {\n      var start = worldToClip(startPos);\n      if (start.w > 0.0) {\n        var nextPos = getPosition(trim.x + 1u);\n        var trimmed = trimAnchor(maxLength, startPos.xyz, nextPos.xyz, centerPos.xyz, afterPos.xyz, width, size, both, start.w, depth);\n        centerPos = vec4<f32>(trimmed, 1.0);\n      }\n    }\n    if ((trimMode & 2) != 0) {\n      var end = worldToClip(endPos);\n      if (end.w > 0.0) {\n        var nextPos = getPosition(trim.y - 1u);\n        var trimmed = trimAnchor(maxLength, endPos.xyz, nextPos.xyz, centerPos.xyz, beforePos.xyz, width, size, both, end.w, depth);\n        centerPos = vec4<f32>(trimmed, 1.0);\n      }\n    }\n  }\n\n  // Clip ends into view\n  var near = viewUniforms.viewNearFar.x * 2.0;\n  var clipBeforeV = clipLineIntoView(beforePos, centerPos, near);\n  var clipAfterV  = clipLineIntoView(afterPos, centerPos, near);\n\n  var before = toClip3D(viewToClip(clipBeforeV));\n  var after  = toClip3D(viewToClip(clipAfterV));\n\n  var centerV = worldToView(centerPos);\n  var center4 = viewToClip(centerV);\n\n  if (center4.w <= 0.0) {\n    if (ij.x == 0u) {\n      centerV = clipLineIntoView(centerPos, afterPos, near);\n    }\n    else if (ij.x != 0u) {\n      centerV = clipLineIntoView(centerPos, beforePos, near);\n    }\n    else {\n      return SolidVertex(\n        vec4(NaN, NaN, NaN, NaN),\n        vec4(NaN, NaN, NaN, NaN),\n        vec2(NaN, NaN),\n        instanceIndex,\n      );\n    }\n    center4 = viewToClip(centerV);\n  }\n\n  var center = toClip3D(center4);\n\n  // Lerp between fixed size and full perspective\n  var pixelScale = getPerspectiveScale(center4.w, depth);\n  width = width * pixelScale;\n\n  var arc = f32(joinIndex) / f32(LINE_JOIN_SIZE);\n  var lineJoin = getLineJoin(before, center, after, arc, xy.y, width, segment, LINE_JOIN_STYLE);\n\n  return SolidVertex(\n    vec4<f32>(lineJoin, 1.0),\n    color,\n    uv,\n    instanceIndex,\n  );\n}\n",
  "instance/vertex/quad": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/use/view'::{ viewUniforms, worldToClip, getPerspectiveScale }; \nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadUV };\n\n@external fn getPosition(i: u32) -> vec4<f32> {};\n@external fn getRectangle(i: u32) -> vec4<f32> {};\n@external fn getColor(i: u32) -> vec4<f32> {};\n@external fn getDepth(i: u32) -> f32 {};\n@external fn getUV(i: u32) -> vec4<f32> {};\n\n@export fn getQuadVertex(vertexIndex: u32, instanceIndex: u32) -> SolidVertex {\n  var position = getPosition(instanceIndex);\n  var rectangle = getRectangle(instanceIndex);\n  var color = getColor(instanceIndex);\n  var depth = getDepth(instanceIndex);\n  var uv4 = getUV(instanceIndex);\n\n  var center = worldToClip(position);\n\n  var uv1 = getQuadUV(vertexIndex);\n  var xy1 = uv1 * 2.0 - 1.0;\n  \n  // Lerp between fixed size and full perspective.\n  var pixelScale = getPerspectiveScale(center.w, depth);\n\n  // Apply half pixel edge bleed on XY and UV\n  var xy: vec2<f32>;\n  var uv: vec2<f32>;\n  if (HAS_EDGE_BLEED) {\n    let bleed = 0.5;\n    var ul = rectangle.xy * pixelScale - bleed;\n    var br = rectangle.zw * pixelScale + bleed;\n    var wh = (rectangle.zw - rectangle.xy) * pixelScale;\n\n    xy = mix(ul, br, uv1);\n    uv = mix(uv4.xy, uv4.zw, uv1 + xy1 * bleed / wh);\n  }\n  else {\n    xy = mix(rectangle.xy, rectangle.zw, uv1) * pixelScale;\n    uv = mix(uv4.xy, uv4.zw, uv1);\n  }\n\n  // Attach to position\n  center = vec4<f32>(center.xy + 2.0 * xy * viewUniforms.viewResolution * center.w, center.zw);\n\n  return SolidVertex(\n    center,\n    color,\n    uv,\n    instanceIndex,\n  );\n}",
  "@use-gpu/wgsl/instance/vertex/quad": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/use/view'::{ viewUniforms, worldToClip, getPerspectiveScale }; \nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadUV };\n\n@external fn getPosition(i: u32) -> vec4<f32> {};\n@external fn getRectangle(i: u32) -> vec4<f32> {};\n@external fn getColor(i: u32) -> vec4<f32> {};\n@external fn getDepth(i: u32) -> f32 {};\n@external fn getUV(i: u32) -> vec4<f32> {};\n\n@export fn getQuadVertex(vertexIndex: u32, instanceIndex: u32) -> SolidVertex {\n  var position = getPosition(instanceIndex);\n  var rectangle = getRectangle(instanceIndex);\n  var color = getColor(instanceIndex);\n  var depth = getDepth(instanceIndex);\n  var uv4 = getUV(instanceIndex);\n\n  var center = worldToClip(position);\n\n  var uv1 = getQuadUV(vertexIndex);\n  var xy1 = uv1 * 2.0 - 1.0;\n  \n  // Lerp between fixed size and full perspective.\n  var pixelScale = getPerspectiveScale(center.w, depth);\n\n  // Apply half pixel edge bleed on XY and UV\n  var xy: vec2<f32>;\n  var uv: vec2<f32>;\n  if (HAS_EDGE_BLEED) {\n    let bleed = 0.5;\n    var ul = rectangle.xy * pixelScale - bleed;\n    var br = rectangle.zw * pixelScale + bleed;\n    var wh = (rectangle.zw - rectangle.xy) * pixelScale;\n\n    xy = mix(ul, br, uv1);\n    uv = mix(uv4.xy, uv4.zw, uv1 + xy1 * bleed / wh);\n  }\n  else {\n    xy = mix(rectangle.xy, rectangle.zw, uv1) * pixelScale;\n    uv = mix(uv4.xy, uv4.zw, uv1);\n  }\n\n  // Attach to position\n  center = vec4<f32>(center.xy + 2.0 * xy * viewUniforms.viewResolution * center.w, center.zw);\n\n  return SolidVertex(\n    center,\n    color,\n    uv,\n    instanceIndex,\n  );\n}",
  "instance/vertex/tick": "use '@use-gpu/wgsl/use/view'::{ worldToClip, getWorldScale };\n\n@external fn transformPosition(p: vec4<f32>) -> vec4<f32>;\n\n@external fn getPosition(i: u32) -> vec4<f32>;\n@external fn getOffset(i: u32) -> vec4<f32>;\n@external fn getDepth(i: u32) -> f32;\n@external fn getSize(i: u32) -> f32;\n\nlet EPSILON: f32 = 0.001;\n\nfn getTickV(n: u32, index: u32) -> f32 {\n  let i = index % n;\n  return f32(i) / f32(TICK_DETAIL) - 0.5;\n};\n\n@export fn getTickPosition(index: u32) -> vec4<f32> {\n  let offset = getOffset(index);\n  let depth = getDepth(index);\n  let size = getSize(index);\n\n  let n = u32(TICK_DETAIL + 1);\n  let anchor = getPosition(index / n);\n  \n  let center = transformPosition(anchor);\n  let adj = transformPosition(anchor + offset * EPSILON);\n\n  let tangent = normalize(adj.xyz - center.xyz);\n\n  let v = getTickV(n, index);\n  \n  let c = worldToClip(center);\n  let s = getWorldScale(c.w, depth);\n\n  return center + vec4<f32>(tangent * size * v * s, 0.0);\n}\n",
  "@use-gpu/wgsl/instance/vertex/tick": "use '@use-gpu/wgsl/use/view'::{ worldToClip, getWorldScale };\n\n@external fn transformPosition(p: vec4<f32>) -> vec4<f32>;\n\n@external fn getPosition(i: u32) -> vec4<f32>;\n@external fn getOffset(i: u32) -> vec4<f32>;\n@external fn getDepth(i: u32) -> f32;\n@external fn getSize(i: u32) -> f32;\n\nlet EPSILON: f32 = 0.001;\n\nfn getTickV(n: u32, index: u32) -> f32 {\n  let i = index % n;\n  return f32(i) / f32(TICK_DETAIL) - 0.5;\n};\n\n@export fn getTickPosition(index: u32) -> vec4<f32> {\n  let offset = getOffset(index);\n  let depth = getDepth(index);\n  let size = getSize(index);\n\n  let n = u32(TICK_DETAIL + 1);\n  let anchor = getPosition(index / n);\n  \n  let center = transformPosition(anchor);\n  let adj = transformPosition(anchor + offset * EPSILON);\n\n  let tangent = normalize(adj.xyz - center.xyz);\n\n  let v = getTickV(n, index);\n  \n  let c = worldToClip(center);\n  let s = getWorldScale(c.w, depth);\n\n  return center + vec4<f32>(tangent * size * v * s, 0.0);\n}\n",
  "mask/masked": "@external fn getMask(uv: vec2<f32>) -> f32;\n@external fn getTexture(uv: vec2<f32>) -> vec4<f32>;\n\n@export fn getMaskedFragment(color: vec4<f32>, uv: vec2<f32>) -> vec4<f32> {\n  return color * getMask(uv) * getTexture(uv);\n}\n",
  "@use-gpu/wgsl/mask/masked": "@external fn getMask(uv: vec2<f32>) -> f32;\n@external fn getTexture(uv: vec2<f32>) -> vec4<f32>;\n\n@export fn getMaskedFragment(color: vec4<f32>, uv: vec2<f32>) -> vec4<f32> {\n  return color * getMask(uv) * getTexture(uv);\n}\n",
  "mask/passthru": "@export fn getPassThruFragment(color: vec4<f32>, uv: vec2<f32>) -> vec4<f32> {\n  return color;\n}\n",
  "@use-gpu/wgsl/mask/passthru": "@export fn getPassThruFragment(color: vec4<f32>, uv: vec2<f32>) -> vec4<f32> {\n  return color;\n}\n",
  "mask/point": "let OUTLINE = 0.4;\n\nfn getUVScale(uv: vec2<f32>) -> f32 {\n  var dx = dpdx(uv);\n  var dy = dpdy(uv);\n  // implicit factor 2 to account for uv -> xy map\n  return length(dx) + length(dy);\n}\n\nfn scaleSDF(sdf: f32, scale: f32) -> f32 {\n  var d = sdf / scale + 0.5;\n  return clamp(d, 0.0, 1.0);\n}\n\nfn outlineSDF(sdf: f32) -> f32 {\n  return min(sdf, OUTLINE - sdf);\n}\n\nfn circleSDF(uv: vec2<f32>) -> f32 {\n  var xy = uv * 2.0 - 1.0;\n  return 1.0 - length(xy);\n}\n\nfn diamondSDF(uv: vec2<f32>) -> f32 {\n  var xy = uv * 2.0 - 1.0;\n  return 1.0 - (abs(xy.x) + abs(xy.y));\n}\n\nfn squareSDF(uv: vec2<f32>) -> f32 {\n  var xy = uv * 2.0 - 1.0;\n  return 1.0 - max(abs(xy.x), abs(xy.y));\n}\n\n@export fn circle(uv: vec2<f32>) -> f32 {\n  var l = circleSDF(uv);\n  var s = getUVScale(uv);\n  return scaleSDF(l, s);\n}\n\n@export fn diamond(uv: vec2<f32>) -> f32 {\n  var l = diamondSDF(uv);\n  var s = getUVScale(uv);\n  return scaleSDF(l, s);\n}\n\n@export fn square(uv: vec2<f32>) -> f32 {\n  var l = squareSDF(uv);\n  var s = getUVScale(uv);\n  return scaleSDF(l, s);\n}\n\n@export fn circleOutlined(uv: vec2<f32>) -> f32 {\n  var l = outlineSDF(circleSDF(uv));\n  var s = getUVScale(uv);\n  return scaleSDF(l, s);\n}\n\n@export fn diamondOutlined(uv: vec2<f32>) -> f32 {\n  var l = outlineSDF(diamondSDF(uv));\n  var s = getUVScale(uv);\n  return scaleSDF(l, s);\n}\n\n@export fn squareOutlined(uv: vec2<f32>) -> f32 {\n  var l = outlineSDF(squareSDF(uv));\n  var s = getUVScale(uv);\n  return scaleSDF(l, s);\n}\n",
  "@use-gpu/wgsl/mask/point": "let OUTLINE = 0.4;\n\nfn getUVScale(uv: vec2<f32>) -> f32 {\n  var dx = dpdx(uv);\n  var dy = dpdy(uv);\n  // implicit factor 2 to account for uv -> xy map\n  return length(dx) + length(dy);\n}\n\nfn scaleSDF(sdf: f32, scale: f32) -> f32 {\n  var d = sdf / scale + 0.5;\n  return clamp(d, 0.0, 1.0);\n}\n\nfn outlineSDF(sdf: f32) -> f32 {\n  return min(sdf, OUTLINE - sdf);\n}\n\nfn circleSDF(uv: vec2<f32>) -> f32 {\n  var xy = uv * 2.0 - 1.0;\n  return 1.0 - length(xy);\n}\n\nfn diamondSDF(uv: vec2<f32>) -> f32 {\n  var xy = uv * 2.0 - 1.0;\n  return 1.0 - (abs(xy.x) + abs(xy.y));\n}\n\nfn squareSDF(uv: vec2<f32>) -> f32 {\n  var xy = uv * 2.0 - 1.0;\n  return 1.0 - max(abs(xy.x), abs(xy.y));\n}\n\n@export fn circle(uv: vec2<f32>) -> f32 {\n  var l = circleSDF(uv);\n  var s = getUVScale(uv);\n  return scaleSDF(l, s);\n}\n\n@export fn diamond(uv: vec2<f32>) -> f32 {\n  var l = diamondSDF(uv);\n  var s = getUVScale(uv);\n  return scaleSDF(l, s);\n}\n\n@export fn square(uv: vec2<f32>) -> f32 {\n  var l = squareSDF(uv);\n  var s = getUVScale(uv);\n  return scaleSDF(l, s);\n}\n\n@export fn circleOutlined(uv: vec2<f32>) -> f32 {\n  var l = outlineSDF(circleSDF(uv));\n  var s = getUVScale(uv);\n  return scaleSDF(l, s);\n}\n\n@export fn diamondOutlined(uv: vec2<f32>) -> f32 {\n  var l = outlineSDF(diamondSDF(uv));\n  var s = getUVScale(uv);\n  return scaleSDF(l, s);\n}\n\n@export fn squareOutlined(uv: vec2<f32>) -> f32 {\n  var l = outlineSDF(squareSDF(uv));\n  var s = getUVScale(uv);\n  return scaleSDF(l, s);\n}\n",
  "mask/textured": "@external fn getTexture(uv: vec2<f32>) -> vec4<f32>;\n\n@export fn getTextureFragment(color: vec4<f32>, uv: vec2<f32>) -> vec4<f32> {\n  return color * getTexture(uv);\n}\n",
  "@use-gpu/wgsl/mask/textured": "@external fn getTexture(uv: vec2<f32>) -> vec4<f32>;\n\n@export fn getTextureFragment(color: vec4<f32>, uv: vec2<f32>) -> vec4<f32> {\n  return color * getTexture(uv);\n}\n",
  "plot/axis": "@external fn getAxisStep(i: u32) -> vec4<f32>;\n@external fn getAxisOrigin(i: u32) -> vec4<f32>;\n\n@export fn getAxisPosition(index: u32) -> vec4<f32> {\n  return getAxisStep(0u) * f32(index) + getAxisOrigin(0u);\n}\n",
  "@use-gpu/wgsl/plot/axis": "@external fn getAxisStep(i: u32) -> vec4<f32>;\n@external fn getAxisOrigin(i: u32) -> vec4<f32>;\n\n@export fn getAxisPosition(index: u32) -> vec4<f32> {\n  return getAxisStep(0u) * f32(index) + getAxisOrigin(0u);\n}\n",
  "plot/grid": "@external fn getGridValue(i: u32) -> f32;\n@external fn getGridDirection(i: u32) -> i32;\n@external fn getGridMin(i: u32) -> vec4<f32>;\n@external fn getGridMax(i: u32) -> vec4<f32>;\n\nlet STEP = vec2<f32>(0.0, 1.0);\n\n@export fn getGridPosition(index: u32) -> vec4<f32> {\n  let n = u32(GRID_DETAIL + 1);\n  let i = index / n;\n\n  let v = getGridV(n, index);\n  let base = mix(getGridMin(0u), getGridMax(0u), v);\n\n  let dir = getGridDirection(0u);\n  var step: vec4<f32>;\n  if      (dir == 0) { step = STEP.yxxx; }\n  else if (dir == 1) { step = STEP.xyxx; }\n  else if (dir == 2) { step = STEP.xxyx; }\n  else               { step = STEP.xxxy; }\n\n  return base + step * getGridValue(index);\n}\n",
  "@use-gpu/wgsl/plot/grid": "@external fn getGridValue(i: u32) -> f32;\n@external fn getGridDirection(i: u32) -> i32;\n@external fn getGridMin(i: u32) -> vec4<f32>;\n@external fn getGridMax(i: u32) -> vec4<f32>;\n\nlet STEP = vec2<f32>(0.0, 1.0);\n\n@export fn getGridPosition(index: u32) -> vec4<f32> {\n  let n = u32(GRID_DETAIL + 1);\n  let i = index / n;\n\n  let v = getGridV(n, index);\n  let base = mix(getGridMin(0u), getGridMax(0u), v);\n\n  let dir = getGridDirection(0u);\n  var step: vec4<f32>;\n  if      (dir == 0) { step = STEP.yxxx; }\n  else if (dir == 1) { step = STEP.xyxx; }\n  else if (dir == 2) { step = STEP.xxyx; }\n  else               { step = STEP.xxxy; }\n\n  return base + step * getGridValue(index);\n}\n",
  "plot/scale": "@external fn getScaleValue(i: u32) -> f32;\n@external fn getScaleDirection(i: u32) -> i32;\n@external fn getScaleOrigin(i: u32) -> vec4<f32>;\n\nlet STEP = vec2<f32>(0.0, 1.0);\n\n@export fn getScalePosition(index: u32) -> vec4<f32> {\n  \n  let dir = getScaleDirection(0u);\n\n  var step: vec4<f32>;\n  if (dir == 0) { step = STEP.yxxx; }\n  if (dir == 1) { step = STEP.xyxx; }\n  if (dir == 2) { step = STEP.xxyx; }\n  if (dir == 3) { step = STEP.xxxy; }\n  \n  return getScaleOrigin(0u) + step * getScaleValue(index);\n}\n",
  "@use-gpu/wgsl/plot/scale": "@external fn getScaleValue(i: u32) -> f32;\n@external fn getScaleDirection(i: u32) -> i32;\n@external fn getScaleOrigin(i: u32) -> vec4<f32>;\n\nlet STEP = vec2<f32>(0.0, 1.0);\n\n@export fn getScalePosition(index: u32) -> vec4<f32> {\n  \n  let dir = getScaleDirection(0u);\n\n  var step: vec4<f32>;\n  if (dir == 0) { step = STEP.yxxx; }\n  if (dir == 1) { step = STEP.xyxx; }\n  if (dir == 2) { step = STEP.xxyx; }\n  if (dir == 3) { step = STEP.xxxy; }\n  \n  return getScaleOrigin(0u) + step * getScaleValue(index);\n}\n",
  "render/fragment/mesh": "use '@use-gpu/wgsl/fragment/pbr'::{ PBR };\nuse '@use-gpu/wgsl/use/view'::{ viewUniforms };\nuse '@use-gpu/wgsl/use/light'::{ lightUniforms };\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var t: texture_2d<f32>;\n\nstruct FragmentOutput {\n  @location(0) outColor: vec4<f32>,\n};\n\n@stage(fragment)\nfn main(\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,\n  @location(2) fragNormal: vec3<f32>,\n  @location(3) fragPosition: vec3<f32>,\n) -> FragmentOutput {\n  var fragLight: vec3<f32> = lightUniforms.lightPosition.xyz - fragPosition;\n  var fragView: vec3<f32> = viewUniforms.viewPosition.xyz - fragPosition;\n\n  var N: vec3<f32> = normalize(fragNormal);\n  var L: vec3<f32> = normalize(fragLight);\n  var V: vec3<f32> = normalize(fragView);\n\n  var texColor: vec4<f32> = textureSample(t, s, fragUV);\n  var inColor: vec4<f32> = fragColor * texColor;\n  if (inColor.a <= 0.0) { discard; }\n\n  var albedo: vec3<f32> = inColor.rgb;\n  var metalness: f32 = 0.2;\n  var roughness: f32 = 0.8;\n\n  var color: vec3<f32> = PBR(N, L, V, albedo, metalness, roughness) * lightUniforms.lightColor.xyz;\n  var outColor: vec4<f32> = vec4<f32>(color, inColor.a);\n\n  return FragmentOutput(outColor);\n}\n",
  "@use-gpu/wgsl/render/fragment/mesh": "use '@use-gpu/wgsl/fragment/pbr'::{ PBR };\nuse '@use-gpu/wgsl/use/view'::{ viewUniforms };\nuse '@use-gpu/wgsl/use/light'::{ lightUniforms };\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var t: texture_2d<f32>;\n\nstruct FragmentOutput {\n  @location(0) outColor: vec4<f32>,\n};\n\n@stage(fragment)\nfn main(\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,\n  @location(2) fragNormal: vec3<f32>,\n  @location(3) fragPosition: vec3<f32>,\n) -> FragmentOutput {\n  var fragLight: vec3<f32> = lightUniforms.lightPosition.xyz - fragPosition;\n  var fragView: vec3<f32> = viewUniforms.viewPosition.xyz - fragPosition;\n\n  var N: vec3<f32> = normalize(fragNormal);\n  var L: vec3<f32> = normalize(fragLight);\n  var V: vec3<f32> = normalize(fragView);\n\n  var texColor: vec4<f32> = textureSample(t, s, fragUV);\n  var inColor: vec4<f32> = fragColor * texColor;\n  if (inColor.a <= 0.0) { discard; }\n\n  var albedo: vec3<f32> = inColor.rgb;\n  var metalness: f32 = 0.2;\n  var roughness: f32 = 0.8;\n\n  var color: vec3<f32> = PBR(N, L, V, albedo, metalness, roughness) * lightUniforms.lightColor.xyz;\n  var outColor: vec4<f32> = vec4<f32>(color, inColor.a);\n\n  return FragmentOutput(outColor);\n}\n",
  "render/fragment/pick-geometry": "use '@use-gpu/wgsl/use/picking'::{ getPickingColor };\n\n@stage(fragment)\nfn main(\n  @location(0) @interpolate(flat) fragIndex: u32,\n) -> @location(0) vec4<u32> {\n  return getPickingColor(fragIndex);\n}\n\n",
  "@use-gpu/wgsl/render/fragment/pick-geometry": "use '@use-gpu/wgsl/use/picking'::{ getPickingColor };\n\n@stage(fragment)\nfn main(\n  @location(0) @interpolate(flat) fragIndex: u32,\n) -> @location(0) vec4<u32> {\n  return getPickingColor(fragIndex);\n}\n\n",
  "render/fragment/solid": "@optional @external fn getFragment(color: vec4<f32>, uv: vec2<f32>) -> vec4<f32> { return color; }\n\n@stage(fragment)\nfn main(\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,  \n) -> @location(0) vec4<f32> {\n  var outColor = fragColor;\n\n  // TODO: awaiting compound support\n  //outColor.xyz *= outColor.a;\n  outColor = vec4<f32>(outColor.xyz, outColor.a);\n  outColor = getFragment(outColor, fragUV);\n\n  if (outColor.a <= 0.0) { discard; }\n\n  return outColor;\n}\n",
  "@use-gpu/wgsl/render/fragment/solid": "@optional @external fn getFragment(color: vec4<f32>, uv: vec2<f32>) -> vec4<f32> { return color; }\n\n@stage(fragment)\nfn main(\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,  \n) -> @location(0) vec4<f32> {\n  var outColor = fragColor;\n\n  // TODO: awaiting compound support\n  //outColor.xyz *= outColor.a;\n  outColor = vec4<f32>(outColor.xyz, outColor.a);\n  outColor = getFragment(outColor, fragUV);\n\n  if (outColor.a <= 0.0) { discard; }\n\n  return outColor;\n}\n",
  "render/fragment/ui": "use '@use-gpu/wgsl/fragment/sdf-2d'::{ SDF, getUVScale };\n\n@external fn getFragment(\n  fragUV: vec2<f32>,\n  fragTextureUV: vec2<f32>,\n  fragSDFUV: vec2<f32>,\n  fragSDFConfig: vec4<f32>,\n  fragRepeat: i32,\n  fragMode: i32,\n  fragLayout: vec4<f32>,\n  fragRadius: vec4<f32>,\n  fragBorder: vec4<f32>,\n  fragStroke: vec4<f32>,\n  fragFill: vec4<f32>,\n) -> vec4<f32> {};\n\n@stage(fragment)\nfn main(\n  @location(0)                     fragUV: vec2<f32>,\n  @location(1)                     fragTextureUV: vec2<f32>,\n  @location(2)                     fragSDFUV: vec2<f32>,\n  @location(3)  @interpolate(flat) fragSDFConfig: vec4<f32>,\n  @location(4)  @interpolate(flat) fragRepeat: i32,\n  @location(5)  @interpolate(flat) fragMode: i32,\n  @location(6)  @interpolate(flat) fragLayout: vec4<f32>,\n  @location(7)  @interpolate(flat) fragRadius: vec4<f32>,\n  @location(8)  @interpolate(flat) fragBorder: vec4<f32>,\n  @location(9)  @interpolate(flat) fragStroke: vec4<f32>,\n  @location(10) @interpolate(flat) fragFill: vec4<f32>,\n) -> @location(0) vec4<f32> {\n\n  return getFragment(\n    fragUV,\n    fragTextureUV,\n    fragSDFUV,\n    fragSDFConfig,\n    fragRepeat,\n    fragMode,\n    fragLayout,\n    fragRadius,\n    fragBorder,\n    fragStroke,\n    fragFill,\n  );\n}",
  "@use-gpu/wgsl/render/fragment/ui": "use '@use-gpu/wgsl/fragment/sdf-2d'::{ SDF, getUVScale };\n\n@external fn getFragment(\n  fragUV: vec2<f32>,\n  fragTextureUV: vec2<f32>,\n  fragSDFUV: vec2<f32>,\n  fragSDFConfig: vec4<f32>,\n  fragRepeat: i32,\n  fragMode: i32,\n  fragLayout: vec4<f32>,\n  fragRadius: vec4<f32>,\n  fragBorder: vec4<f32>,\n  fragStroke: vec4<f32>,\n  fragFill: vec4<f32>,\n) -> vec4<f32> {};\n\n@stage(fragment)\nfn main(\n  @location(0)                     fragUV: vec2<f32>,\n  @location(1)                     fragTextureUV: vec2<f32>,\n  @location(2)                     fragSDFUV: vec2<f32>,\n  @location(3)  @interpolate(flat) fragSDFConfig: vec4<f32>,\n  @location(4)  @interpolate(flat) fragRepeat: i32,\n  @location(5)  @interpolate(flat) fragMode: i32,\n  @location(6)  @interpolate(flat) fragLayout: vec4<f32>,\n  @location(7)  @interpolate(flat) fragRadius: vec4<f32>,\n  @location(8)  @interpolate(flat) fragBorder: vec4<f32>,\n  @location(9)  @interpolate(flat) fragStroke: vec4<f32>,\n  @location(10) @interpolate(flat) fragFill: vec4<f32>,\n) -> @location(0) vec4<f32> {\n\n  return getFragment(\n    fragUV,\n    fragTextureUV,\n    fragSDFUV,\n    fragSDFConfig,\n    fragRepeat,\n    fragMode,\n    fragLayout,\n    fragRadius,\n    fragBorder,\n    fragStroke,\n    fragFill,\n  );\n}",
  "render/ui/fragment-pick": "use '@use-gpu/glsl/use/picking'::{ getPickingColor };\nuse './sdf'::{ SDF, getBorderBoxSDF, getRoundedBorderBoxSDF };\n\n@external fn getTexture(uv: vec2<f32>) -> vec4<f32> {};\n\nlet NO_BORDER = vec4<f32>(0.0, 0.0, 0.0, 0.0);\n\n@stage(fragment)\nfn main(\n  @location(0) @interpolate(flat) fragRectangle: vec4<f32>,\n  @location(1) @interpolate(flat) fragRadius: vec4<f32>,\n  @location(2) @interpolate(flat) fragMode: i32,\n  @location(3) @interpolate(flat) fragIndex: u32,\n  @location(4)                    fragUV: vec2<f32>,\n) -> @location(0) vec4<u32> {\n  var color = getPickingColor(fragIndex);\n  if (fragMode == 0) { return color; }\n\n  var sdf: SDF;\n  if (fragMode == 1) { sdf = getBorderBoxSDF(fragRectangle, NO_BORDER, fragUV); }\n  else { sdf = getRoundedBorderBoxSDF(fragRectangle, fragRadius, NO_BORDER, fragUV); }\n\n  var mask = clamp(sdf.outer, 0.0, 1.0);\n  if (mask == 0.0) { discard; }\n\n  return color;\n}\n",
  "@use-gpu/wgsl/render/ui/fragment-pick": "use '@use-gpu/glsl/use/picking'::{ getPickingColor };\nuse './sdf'::{ SDF, getBorderBoxSDF, getRoundedBorderBoxSDF };\n\n@external fn getTexture(uv: vec2<f32>) -> vec4<f32> {};\n\nlet NO_BORDER = vec4<f32>(0.0, 0.0, 0.0, 0.0);\n\n@stage(fragment)\nfn main(\n  @location(0) @interpolate(flat) fragRectangle: vec4<f32>,\n  @location(1) @interpolate(flat) fragRadius: vec4<f32>,\n  @location(2) @interpolate(flat) fragMode: i32,\n  @location(3) @interpolate(flat) fragIndex: u32,\n  @location(4)                    fragUV: vec2<f32>,\n) -> @location(0) vec4<u32> {\n  var color = getPickingColor(fragIndex);\n  if (fragMode == 0) { return color; }\n\n  var sdf: SDF;\n  if (fragMode == 1) { sdf = getBorderBoxSDF(fragRectangle, NO_BORDER, fragUV); }\n  else { sdf = getRoundedBorderBoxSDF(fragRectangle, fragRadius, NO_BORDER, fragUV); }\n\n  var mask = clamp(sdf.outer, 0.0, 1.0);\n  if (mask == 0.0) { discard; }\n\n  return color;\n}\n",
  "render/ui/fragment": "use './sdf'::{ SDF, getUVScale, getBorderBoxSDF, getRoundedBorderBoxSDF };\n\n@external fn getTexture(uv: vec2<f32>) -> vec4<f32> {};\n\n@stage(fragment)\nfn main(\n  @location(0) @interpolate(flat) fragRectangle: vec4<f32>,\n  @location(1) @interpolate(flat) fragRadius: vec4<f32>,\n  @location(2) @interpolate(flat) fragMode: i32,\n  @location(3) @interpolate(flat) fragBorder: vec4<f32>,\n  @location(4) @interpolate(flat) fragStroke: vec4<f32>,\n  @location(5) @interpolate(flat) fragFill: vec4<f32>,\n  @location(6) @interpolate(flat) fragRepeat: i32,\n  @location(7)                    fragUV: vec2<f32>,\n  @location(8)                    fragTextureUV: vec2<f32>,\n) -> @location(0) vec4<f32> {\n  var fillColor = fragFill;\n\n  var texture = getTexture(fragTextureUV);\n  var sdf: SDF;\n  \n  if (fragRepeat < 0) {\n    var wh = fragRectangle.zw - fragRectangle.xy;\n    var scale = getUVScale(fragUV * wh) * fragRadius.x;\n    var d = (texture.a - 0.75) * f32(fragRadius.y) + 0.25;\n    sdf = SDF(d / scale, d / scale);\n  }\n  else {\n    if (texture.a > 0.0) {\n      if (fragRepeat == 0 || fragRepeat == 1) {\n        if (fragTextureUV.x < 0.0 || fragTextureUV.x > 1.0) { texture.a = 0.0; }\n      }\n      if (fragRepeat == 0 || fragRepeat == 2) {\n        if (fragTextureUV.y < 0.0 || fragTextureUV.y > 1.0) { texture.a = 0.0; }\n      }\n  \n      fillColor = vec4<f32>(\n        fillColor.rgb * fillColor.a * (1.0 - texture.a) + texture.rgb,\n        mix(fillColor.a, 1.0, texture.a),\n      );\n    }\n  \n    if (fillColor.a <= 0.0) { discard; }\n  \n    if (fragMode == 0) { return fillColor; }\n\n    if (fragMode == 1) { sdf = getBorderBoxSDF(fragRectangle, fragBorder, fragUV); }\n    else { sdf = getRoundedBorderBoxSDF(fragRectangle, fragRadius, fragBorder, fragUV); }\n  }\n\n  var mask = clamp(sdf.outer, 0.0, 1.0);\n  if (mask == 0.0) { discard; }\n\n  var color = mix(fragStroke, fillColor, clamp(sdf.inner + (1.0 - mask), 0.0, 1.0));\n  color = color * fillColor.a;\n  color = color * mask;\n\n  return color;\n}\n",
  "@use-gpu/wgsl/render/ui/fragment": "use './sdf'::{ SDF, getUVScale, getBorderBoxSDF, getRoundedBorderBoxSDF };\n\n@external fn getTexture(uv: vec2<f32>) -> vec4<f32> {};\n\n@stage(fragment)\nfn main(\n  @location(0) @interpolate(flat) fragRectangle: vec4<f32>,\n  @location(1) @interpolate(flat) fragRadius: vec4<f32>,\n  @location(2) @interpolate(flat) fragMode: i32,\n  @location(3) @interpolate(flat) fragBorder: vec4<f32>,\n  @location(4) @interpolate(flat) fragStroke: vec4<f32>,\n  @location(5) @interpolate(flat) fragFill: vec4<f32>,\n  @location(6) @interpolate(flat) fragRepeat: i32,\n  @location(7)                    fragUV: vec2<f32>,\n  @location(8)                    fragTextureUV: vec2<f32>,\n) -> @location(0) vec4<f32> {\n  var fillColor = fragFill;\n\n  var texture = getTexture(fragTextureUV);\n  var sdf: SDF;\n  \n  if (fragRepeat < 0) {\n    var wh = fragRectangle.zw - fragRectangle.xy;\n    var scale = getUVScale(fragUV * wh) * fragRadius.x;\n    var d = (texture.a - 0.75) * f32(fragRadius.y) + 0.25;\n    sdf = SDF(d / scale, d / scale);\n  }\n  else {\n    if (texture.a > 0.0) {\n      if (fragRepeat == 0 || fragRepeat == 1) {\n        if (fragTextureUV.x < 0.0 || fragTextureUV.x > 1.0) { texture.a = 0.0; }\n      }\n      if (fragRepeat == 0 || fragRepeat == 2) {\n        if (fragTextureUV.y < 0.0 || fragTextureUV.y > 1.0) { texture.a = 0.0; }\n      }\n  \n      fillColor = vec4<f32>(\n        fillColor.rgb * fillColor.a * (1.0 - texture.a) + texture.rgb,\n        mix(fillColor.a, 1.0, texture.a),\n      );\n    }\n  \n    if (fillColor.a <= 0.0) { discard; }\n  \n    if (fragMode == 0) { return fillColor; }\n\n    if (fragMode == 1) { sdf = getBorderBoxSDF(fragRectangle, fragBorder, fragUV); }\n    else { sdf = getRoundedBorderBoxSDF(fragRectangle, fragRadius, fragBorder, fragUV); }\n  }\n\n  var mask = clamp(sdf.outer, 0.0, 1.0);\n  if (mask == 0.0) { discard; }\n\n  var color = mix(fragStroke, fillColor, clamp(sdf.inner + (1.0 - mask), 0.0, 1.0));\n  color = color * fillColor.a;\n  color = color * mask;\n\n  return color;\n}\n",
  "render/ui/sdf": "@export struct SDF {\n  outer: f32,\n  inner: f32,\n};\n\n@export fn getUVScale(uv: vec2<f32>) -> f32 {\n  var dx = dpdx(uv);\n  var dy = dpdy(uv);\n  return (length(dx) + length(dy)) * 0.5;\n}\n\n@export fn getBorderBoxSDF(box: vec4<f32>, border: vec4<f32>, uv: vec2<f32>) -> SDF {\n  var wh = box.zw - box.xy;\n  var scale = getUVScale(uv * wh);\n\n  var nearest = round(uv);\n  var xy = (abs(uv - .5) - .5) * wh;\n\n  var d1 = max(xy.x, xy.y);\n  var outer = 0.5 - d1;\n\n  var bs = mix(border.xy, border.zw, nearest);\n  var b = max(bs.x, bs.y);\n\n  xy = xy + bs;\n  var d2 = max(xy.x, xy.y);\n  var inner = 0.5 - d2;\n\n  return SDF(outer / scale, inner / scale);\n}\n\n@export fn getRoundedBorderBoxSDF(box: vec4<f32>, radius: vec4<f32>, border: vec4<f32>, uv: vec2<f32>) -> SDF {\n  var wh = box.zw - box.xy;\n  var scale = getUVScale(uv * wh);\n\n  var nearest = round(uv);\n  var rs = mix(radius.xw, radius.yz, nearest.x);\n  var r = mix(rs.x, rs.y, nearest.y);\n\n  var bs = mix(border.xy, border.zw, nearest);\n  var b = max(bs.x, bs.y);\n\n  var xy = (abs(uv - .5) - .5) * wh;\n\n  var clip = max(vec2<f32>(0.0), xy + r);\n  var neg = min(0.0, max(xy.x, xy.y) + r);\n\n  var outer: f32;\n  var inner: f32;\n  outer = r + 0.5 - length(clip) - neg;\n  inner = outer;\n  if (b > 0.0) {\n    xy = xy + bs;\n    r = max(0.0, r - b);\n\n    var clip = max(vec2<f32>(0.0), xy + r);\n    var neg = min(0.0, max(xy.x, xy.y) + r);\n    inner = r + 0.5 - length(clip) - neg;\n  }\n\n  return SDF(outer / scale, inner / scale);\n}\n",
  "@use-gpu/wgsl/render/ui/sdf": "@export struct SDF {\n  outer: f32,\n  inner: f32,\n};\n\n@export fn getUVScale(uv: vec2<f32>) -> f32 {\n  var dx = dpdx(uv);\n  var dy = dpdy(uv);\n  return (length(dx) + length(dy)) * 0.5;\n}\n\n@export fn getBorderBoxSDF(box: vec4<f32>, border: vec4<f32>, uv: vec2<f32>) -> SDF {\n  var wh = box.zw - box.xy;\n  var scale = getUVScale(uv * wh);\n\n  var nearest = round(uv);\n  var xy = (abs(uv - .5) - .5) * wh;\n\n  var d1 = max(xy.x, xy.y);\n  var outer = 0.5 - d1;\n\n  var bs = mix(border.xy, border.zw, nearest);\n  var b = max(bs.x, bs.y);\n\n  xy = xy + bs;\n  var d2 = max(xy.x, xy.y);\n  var inner = 0.5 - d2;\n\n  return SDF(outer / scale, inner / scale);\n}\n\n@export fn getRoundedBorderBoxSDF(box: vec4<f32>, radius: vec4<f32>, border: vec4<f32>, uv: vec2<f32>) -> SDF {\n  var wh = box.zw - box.xy;\n  var scale = getUVScale(uv * wh);\n\n  var nearest = round(uv);\n  var rs = mix(radius.xw, radius.yz, nearest.x);\n  var r = mix(rs.x, rs.y, nearest.y);\n\n  var bs = mix(border.xy, border.zw, nearest);\n  var b = max(bs.x, bs.y);\n\n  var xy = (abs(uv - .5) - .5) * wh;\n\n  var clip = max(vec2<f32>(0.0), xy + r);\n  var neg = min(0.0, max(xy.x, xy.y) + r);\n\n  var outer: f32;\n  var inner: f32;\n  outer = r + 0.5 - length(clip) - neg;\n  inner = outer;\n  if (b > 0.0) {\n    xy = xy + bs;\n    r = max(0.0, r - b);\n\n    var clip = max(vec2<f32>(0.0), xy + r);\n    var neg = min(0.0, max(xy.x, xy.y) + r);\n    inner = r + 0.5 - length(clip) - neg;\n  }\n\n  return SDF(outer / scale, inner / scale);\n}\n",
  "render/ui/vertex-pick": "use '@use-gpu/wgsl/use/view'::{ worldToClip };\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadUV };\n\nstruct VertexOutput {\n  @builtin(position)              position: vec4<f32>,\n  @location(0) @interpolate(flat) fragRectangle: vec4<f32>,\n  @location(1) @interpolate(flat) fragRadius: vec4<f32>,\n  @location(2) @interpolate(flat) fragMode: i32,\n  @location(3) @interpolate(flat) fragIndex: u32,\n  @location(4)                    fragUV: vec2<f32>,\n};\n\n@external fn getRectangle(i: u32) -> vec4<f32>;\n@external fn getRadius(i: u32) -> vec4<f32>;\n@external fn getUV(i: u32) -> vec4<f32>;\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n\n  var rectangle = getRectangle(instanceIndex);\n  var radius = getRadius(instanceIndex);\n\n  var uv = getQuadUV(vertexIndex);\n  var position = vec4<f32>(mix(rectangle.xy, rectangle.zw, uv), 0.5, 1.0);\n  var center = worldToClip(position);\n\n  var mode: i32;\n  if (length(radius + border) == 0.0) { mode = 0; }\n  else if (length(radius) == 0.0) { mode = 1; }\n  else { mode = 2; };\n\n  return VertexOutput(\n    center,\n    rectangle,\n    radius,\n    fragMode,\n    instanceIndex,\n    uv,\n  );\n}\n",
  "@use-gpu/wgsl/render/ui/vertex-pick": "use '@use-gpu/wgsl/use/view'::{ worldToClip };\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadUV };\n\nstruct VertexOutput {\n  @builtin(position)              position: vec4<f32>,\n  @location(0) @interpolate(flat) fragRectangle: vec4<f32>,\n  @location(1) @interpolate(flat) fragRadius: vec4<f32>,\n  @location(2) @interpolate(flat) fragMode: i32,\n  @location(3) @interpolate(flat) fragIndex: u32,\n  @location(4)                    fragUV: vec2<f32>,\n};\n\n@external fn getRectangle(i: u32) -> vec4<f32>;\n@external fn getRadius(i: u32) -> vec4<f32>;\n@external fn getUV(i: u32) -> vec4<f32>;\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n\n  var rectangle = getRectangle(instanceIndex);\n  var radius = getRadius(instanceIndex);\n\n  var uv = getQuadUV(vertexIndex);\n  var position = vec4<f32>(mix(rectangle.xy, rectangle.zw, uv), 0.5, 1.0);\n  var center = worldToClip(position);\n\n  var mode: i32;\n  if (length(radius + border) == 0.0) { mode = 0; }\n  else if (length(radius) == 0.0) { mode = 1; }\n  else { mode = 2; };\n\n  return VertexOutput(\n    center,\n    rectangle,\n    radius,\n    fragMode,\n    instanceIndex,\n    uv,\n  );\n}\n",
  "render/ui/vertex": "use '@use-gpu/wgsl/use/view'::{ worldToClip };\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadUV };\nuse \"@use-gpu/wgsl/use/color\"::{toColorSpace};\n\nstruct VertexOutput {\n  @builtin(position)              position: vec4<f32>,\n  @location(0) @interpolate(flat) fragRectangle: vec4<f32>,\n  @location(1) @interpolate(flat) fragRadius: vec4<f32>,\n  @location(2) @interpolate(flat) fragMode: i32,\n  @location(3) @interpolate(flat) fragBorder: vec4<f32>,\n  @location(4) @interpolate(flat) fragStroke: vec4<f32>,\n  @location(5) @interpolate(flat) fragFill: vec4<f32>,\n  @location(6) @interpolate(flat) fragRepeat: i32,\n  @location(7)                    fragUV: vec2<f32>,\n  @location(8)                    fragTextureUV: vec2<f32>,\n};\n\n@external fn getRectangle(i: u32) -> vec4<f32>;\n@external fn getRadius(i: u32) -> vec4<f32>;\n@external fn getBorder(i: u32) -> vec4<f32>;\n@external fn getFill(i: u32) -> vec4<f32>;\n@external fn getStroke(i: u32) -> vec4<f32>;\n@external fn getUV(i: u32) -> vec4<f32>;\n@external fn getRepeat(i: u32) -> i32;\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n\n  var rectangle = getRectangle(instanceIndex);\n  var radius = getRadius(instanceIndex);\n  var border = getBorder(instanceIndex);\n  var fill = getFill(instanceIndex);\n  var stroke = getStroke(instanceIndex);\n  var uv4 = getUV(instanceIndex);\n  var repeat = getRepeat(instanceIndex);\n\n  var uv = getQuadUV(vertexIndex);\n  var position = vec4<f32>(mix(rectangle.xy, rectangle.zw, uv), 0.5, 1.0);\n  var center = worldToClip(position);\n\n  var texUV = mix(uv4.xy, uv4.zw, uv);\n\n  var mode: i32;\n  if (length(radius + border) == 0.0) { mode = 0; }\n  else if (length(radius) == 0.0) { mode = 1; }\n  else { mode = 2; };\n\n  return VertexOutput(\n    center,\n    rectangle,\n    radius,\n    mode,\n    border,\n    toColorSpace(stroke),\n    toColorSpace(fill),\n    repeat,\n    uv,\n    texUV,\n  );\n}\n",
  "@use-gpu/wgsl/render/ui/vertex": "use '@use-gpu/wgsl/use/view'::{ worldToClip };\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadUV };\nuse \"@use-gpu/wgsl/use/color\"::{toColorSpace};\n\nstruct VertexOutput {\n  @builtin(position)              position: vec4<f32>,\n  @location(0) @interpolate(flat) fragRectangle: vec4<f32>,\n  @location(1) @interpolate(flat) fragRadius: vec4<f32>,\n  @location(2) @interpolate(flat) fragMode: i32,\n  @location(3) @interpolate(flat) fragBorder: vec4<f32>,\n  @location(4) @interpolate(flat) fragStroke: vec4<f32>,\n  @location(5) @interpolate(flat) fragFill: vec4<f32>,\n  @location(6) @interpolate(flat) fragRepeat: i32,\n  @location(7)                    fragUV: vec2<f32>,\n  @location(8)                    fragTextureUV: vec2<f32>,\n};\n\n@external fn getRectangle(i: u32) -> vec4<f32>;\n@external fn getRadius(i: u32) -> vec4<f32>;\n@external fn getBorder(i: u32) -> vec4<f32>;\n@external fn getFill(i: u32) -> vec4<f32>;\n@external fn getStroke(i: u32) -> vec4<f32>;\n@external fn getUV(i: u32) -> vec4<f32>;\n@external fn getRepeat(i: u32) -> i32;\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n\n  var rectangle = getRectangle(instanceIndex);\n  var radius = getRadius(instanceIndex);\n  var border = getBorder(instanceIndex);\n  var fill = getFill(instanceIndex);\n  var stroke = getStroke(instanceIndex);\n  var uv4 = getUV(instanceIndex);\n  var repeat = getRepeat(instanceIndex);\n\n  var uv = getQuadUV(vertexIndex);\n  var position = vec4<f32>(mix(rectangle.xy, rectangle.zw, uv), 0.5, 1.0);\n  var center = worldToClip(position);\n\n  var texUV = mix(uv4.xy, uv4.zw, uv);\n\n  var mode: i32;\n  if (length(radius + border) == 0.0) { mode = 0; }\n  else if (length(radius) == 0.0) { mode = 1; }\n  else { mode = 2; };\n\n  return VertexOutput(\n    center,\n    rectangle,\n    radius,\n    mode,\n    border,\n    toColorSpace(stroke),\n    toColorSpace(fill),\n    repeat,\n    uv,\n    texUV,\n  );\n}\n",
  "render/vertex/mesh-pick": "use '@use-gpu/wgsl/use/view'::{ worldToClip };\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) @interpolate(flat) fragIndex: u32,\n};\n\n@stage(vertex)\nfn main(\n  @builtin(instance_index) instanceIndex: u32,\n  @location(0) position: vec4<f32>,\n  @location(1) normal: vec4<f32>,\n  @location(2) color: vec4<f32>,\n  @location(3) uv: vec2<f32>,\n) -> VertexOutput {\n  \n  var outPosition: vec4<f32> = worldToClip(position);\n  var fragIndex = u32(instanceIndex);\n  \n  return VertexOutput(\n    outPosition,\n    fragIndex,\n  );\n}\n",
  "@use-gpu/wgsl/render/vertex/mesh-pick": "use '@use-gpu/wgsl/use/view'::{ worldToClip };\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) @interpolate(flat) fragIndex: u32,\n};\n\n@stage(vertex)\nfn main(\n  @builtin(instance_index) instanceIndex: u32,\n  @location(0) position: vec4<f32>,\n  @location(1) normal: vec4<f32>,\n  @location(2) color: vec4<f32>,\n  @location(3) uv: vec2<f32>,\n) -> VertexOutput {\n  \n  var outPosition: vec4<f32> = worldToClip(position);\n  var fragIndex = u32(instanceIndex);\n  \n  return VertexOutput(\n    outPosition,\n    fragIndex,\n  );\n}\n",
  "render/vertex/mesh": "use '@use-gpu/wgsl/use/view'::{ worldToClip };\nuse \"@use-gpu/wgsl/use/color\"::{ toColorSpace };\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,\n  @location(2) fragNormal: vec3<f32>,\n  @location(3) fragPosition: vec3<f32>,\n};\n\n@stage(vertex)\nfn main(\n  @builtin(instance_index) instanceIndex: u32,\n  @location(0) position: vec4<f32>,\n  @location(1) normal: vec4<f32>,\n  @location(2) color: vec4<f32>,\n  @location(3) uv: vec2<f32>,\n) -> VertexOutput {\n  \n  var outPosition: vec4<f32> = worldToClip(position);\n  \n  return VertexOutput(\n    outPosition,\n    toColorSpace(color),\n    uv,\n    normal.xyz,\n    position.xyz,\n  );\n}\n",
  "@use-gpu/wgsl/render/vertex/mesh": "use '@use-gpu/wgsl/use/view'::{ worldToClip };\nuse \"@use-gpu/wgsl/use/color\"::{ toColorSpace };\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,\n  @location(2) fragNormal: vec3<f32>,\n  @location(3) fragPosition: vec3<f32>,\n};\n\n@stage(vertex)\nfn main(\n  @builtin(instance_index) instanceIndex: u32,\n  @location(0) position: vec4<f32>,\n  @location(1) normal: vec4<f32>,\n  @location(2) color: vec4<f32>,\n  @location(3) uv: vec2<f32>,\n) -> VertexOutput {\n  \n  var outPosition: vec4<f32> = worldToClip(position);\n  \n  return VertexOutput(\n    outPosition,\n    toColorSpace(color),\n    uv,\n    normal.xyz,\n    position.xyz,\n  );\n}\n",
  "render/vertex/virtual-pick": "use '@use-gpu/wgsl/use/types'::{ PickVertex };\n\n@external fn getVertex(v: u32, i: u32) -> PickVertex {};\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) @interpolate(flat) fragIndex: u32,\n};\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n  var v = getVertex(vertexIndex, instanceIndex);\n\n  return VertexOutput(\n    v.position,\n    v.index,\n  );\n}\n",
  "@use-gpu/wgsl/render/vertex/virtual-pick": "use '@use-gpu/wgsl/use/types'::{ PickVertex };\n\n@external fn getVertex(v: u32, i: u32) -> PickVertex {};\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) @interpolate(flat) fragIndex: u32,\n};\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n  var v = getVertex(vertexIndex, instanceIndex);\n\n  return VertexOutput(\n    v.position,\n    v.index,\n  );\n}\n",
  "render/vertex/virtual-solid": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse \"@use-gpu/wgsl/use/color\"::{ toColorSpace };\n\n@external fn getVertex(v: u32, i: u32) -> SolidVertex {};\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,\n};\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n  let v = getVertex(vertexIndex, instanceIndex);\n\n  return VertexOutput(\n    v.position,\n    toColorSpace(v.color),\n    v.uv,\n  );\n}\n",
  "@use-gpu/wgsl/render/vertex/virtual-solid": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse \"@use-gpu/wgsl/use/color\"::{ toColorSpace };\n\n@external fn getVertex(v: u32, i: u32) -> SolidVertex {};\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,\n};\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n  let v = getVertex(vertexIndex, instanceIndex);\n\n  return VertexOutput(\n    v.position,\n    toColorSpace(v.color),\n    v.uv,\n  );\n}\n",
  "render/vertex/virtual-ui": "use '@use-gpu/wgsl/use/types'::{ UIVertex };\nuse \"@use-gpu/wgsl/use/color\"::{ toColorSpace };\n\n@external fn getVertex(v: u32, i: u32) -> UIVertex {};\n\nstruct VertexOutput {\n  @builtin(position)               position: vec4<f32>,\n  @location(0)                     fragUV: vec2<f32>,\n  @location(1)                     fragTextureUV: vec2<f32>,\n  @location(2)                     fragSDFUV: vec2<f32>,\n  @location(3)  @interpolate(flat) fragSDFConfig: vec4<f32>,\n  @location(4)  @interpolate(flat) fragRepeat: i32,\n  @location(5)  @interpolate(flat) fragMode: i32,\n  @location(6)  @interpolate(flat) fragLayout: vec4<f32>,\n  @location(7)  @interpolate(flat) fragRadius: vec4<f32>,\n  @location(8)  @interpolate(flat) fragBorder: vec4<f32>,\n  @location(9)  @interpolate(flat) fragStroke: vec4<f32>,\n  @location(10) @interpolate(flat) fragFill: vec4<f32>,\n};\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n  var v = getVertex(vertexIndex, instanceIndex);\n\n  return VertexOutput(\n    v.position,\n\n    v.uv,\n    v.textureUV,\n    v.sdfUV,\n    v.sdfConfig,\n    v.repeat,\n    v.mode,\n    v.layout,\n    v.radius,\n    v.border,\n    toColorSpace(v.stroke),\n    toColorSpace(v.fill),\n  );\n}\n",
  "@use-gpu/wgsl/render/vertex/virtual-ui": "use '@use-gpu/wgsl/use/types'::{ UIVertex };\nuse \"@use-gpu/wgsl/use/color\"::{ toColorSpace };\n\n@external fn getVertex(v: u32, i: u32) -> UIVertex {};\n\nstruct VertexOutput {\n  @builtin(position)               position: vec4<f32>,\n  @location(0)                     fragUV: vec2<f32>,\n  @location(1)                     fragTextureUV: vec2<f32>,\n  @location(2)                     fragSDFUV: vec2<f32>,\n  @location(3)  @interpolate(flat) fragSDFConfig: vec4<f32>,\n  @location(4)  @interpolate(flat) fragRepeat: i32,\n  @location(5)  @interpolate(flat) fragMode: i32,\n  @location(6)  @interpolate(flat) fragLayout: vec4<f32>,\n  @location(7)  @interpolate(flat) fragRadius: vec4<f32>,\n  @location(8)  @interpolate(flat) fragBorder: vec4<f32>,\n  @location(9)  @interpolate(flat) fragStroke: vec4<f32>,\n  @location(10) @interpolate(flat) fragFill: vec4<f32>,\n};\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n  var v = getVertex(vertexIndex, instanceIndex);\n\n  return VertexOutput(\n    v.position,\n\n    v.uv,\n    v.textureUV,\n    v.sdfUV,\n    v.sdfConfig,\n    v.repeat,\n    v.mode,\n    v.layout,\n    v.radius,\n    v.border,\n    toColorSpace(v.stroke),\n    toColorSpace(v.fill),\n  );\n}\n",
  "render/vertex/wireframe-list": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadIndex };\nuse '@use-gpu/wgsl/geometry/strip'::{ getStripIndex };\nuse '@use-gpu/wgsl/geometry/line'::{ getLineJoin };\n\n@external fn getVertex(v: u32, i: u32) -> SolidVertex {};\n@external fn getInstanceSize() -> u32 {};\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,\n};\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n\n  let vi = vertexIndex;\n  var ij = getStripIndex(vi - (vi / 3u) * 2u);\n  var xy = vec2<f32>(ij) * 2.0 - 1.0;\n\n  var n = getInstanceSize();\n  var f = instanceIndex % n;\n  var i = instanceIndex / n;\n\n  var v = u32(f) % 3u;\n  var t = u32(f) - v;\n\n  var a: SolidVertex;\n  var b: SolidVertex;\n  var c: SolidVertex;\n  if (v == 0u) {\n    a = getVertex(t, i);\n    b = getVertex(t + 1u, i);\n    c = getVertex(t + 2u, i);\n  }\n  else if (v == 1u) {\n    a = getVertex(t + 1u, i);\n    b = getVertex(t + 2u, i);\n    c = getVertex(t, i);\n  }\n  else if (v == 2u) {\n    a = getVertex(t + 2u, i);\n    b = getVertex(t, i);\n    c = getVertex(t + 1u, i);\n  }\n\n  var left = a.position.xyz / a.position.w;\n  var right = b.position.xyz / b.position.w;\n  var other = c.position.xyz / c.position.w;\n\n  var join: vec3<f32>;\n  if (ij.x > 0u) {\n    join = getLineJoin(left, right, other, (f32(ij.x) - 1.0) / 2.0, xy.y, 2.0, 3, 2);\n  }\n  else {\n    join = getLineJoin(other, left, right, 1.0, xy.y, 2.0, 3, 2);\n  }\n\n  return VertexOutput(\n    vec4<f32>(join, 1.0),\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\n    vec2<f32>(0.0, 0.0),\n  );\n}\n",
  "@use-gpu/wgsl/render/vertex/wireframe-list": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadIndex };\nuse '@use-gpu/wgsl/geometry/strip'::{ getStripIndex };\nuse '@use-gpu/wgsl/geometry/line'::{ getLineJoin };\n\n@external fn getVertex(v: u32, i: u32) -> SolidVertex {};\n@external fn getInstanceSize() -> u32 {};\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,\n};\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n\n  let vi = vertexIndex;\n  var ij = getStripIndex(vi - (vi / 3u) * 2u);\n  var xy = vec2<f32>(ij) * 2.0 - 1.0;\n\n  var n = getInstanceSize();\n  var f = instanceIndex % n;\n  var i = instanceIndex / n;\n\n  var v = u32(f) % 3u;\n  var t = u32(f) - v;\n\n  var a: SolidVertex;\n  var b: SolidVertex;\n  var c: SolidVertex;\n  if (v == 0u) {\n    a = getVertex(t, i);\n    b = getVertex(t + 1u, i);\n    c = getVertex(t + 2u, i);\n  }\n  else if (v == 1u) {\n    a = getVertex(t + 1u, i);\n    b = getVertex(t + 2u, i);\n    c = getVertex(t, i);\n  }\n  else if (v == 2u) {\n    a = getVertex(t + 2u, i);\n    b = getVertex(t, i);\n    c = getVertex(t + 1u, i);\n  }\n\n  var left = a.position.xyz / a.position.w;\n  var right = b.position.xyz / b.position.w;\n  var other = c.position.xyz / c.position.w;\n\n  var join: vec3<f32>;\n  if (ij.x > 0u) {\n    join = getLineJoin(left, right, other, (f32(ij.x) - 1.0) / 2.0, xy.y, 2.0, 3, 2);\n  }\n  else {\n    join = getLineJoin(other, left, right, 1.0, xy.y, 2.0, 3, 2);\n  }\n\n  return VertexOutput(\n    vec4<f32>(join, 1.0),\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\n    vec2<f32>(0.0, 0.0),\n  );\n}\n",
  "render/vertex/wireframe-strip": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadIndex };\nuse '@use-gpu/wgsl/geometry/strip'::{ getStripIndex };\nuse '@use-gpu/wgsl/geometry/line'::{ getLineJoin };\n\n@external fn getVertex(v: u32, i: u32) -> SolidVertex {};\n@external fn getInstanceSize() -> u32 {};\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,\n};\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n\n  var ij = getQuadIndex(vertexIndex);\n  var xy = vec2<f32>(ij) * 2.0 - 1.0;\n\n  var n = getInstanceSize();\n  var f = instanceIndex % n;\n  var i = instanceIndex / n;\n\n  var stripIndex = getStripIndex(f);\n  var edgeIndex = stripIndex.y;\n  var triIndex = stripIndex.x;\n\n  var a = getVertex(triIndex, i);\n  var b = getVertex(triIndex + 1u + edgeIndex, i);\n\n  var left = a.position.xyz / a.position.w;\n  var right = b.position.xyz / b.position.w;\n\n  var join: vec3<f32>;\n  if (ij.x > 0u) {\n    join = getLineJoin(left, left, right, 0.0, xy.y, 2.0, 1, 0);\n  }\n  else {\n    join = getLineJoin(left, right, right, 0.0, xy.y, 2.0, 2, 0);\n  }\n\n  return VertexOutput(\n    vec4<f32>(join, 1.0),\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\n    vec2<f32>(0.0, 0.0),\n  );\n}\n",
  "@use-gpu/wgsl/render/vertex/wireframe-strip": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadIndex };\nuse '@use-gpu/wgsl/geometry/strip'::{ getStripIndex };\nuse '@use-gpu/wgsl/geometry/line'::{ getLineJoin };\n\n@external fn getVertex(v: u32, i: u32) -> SolidVertex {};\n@external fn getInstanceSize() -> u32 {};\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>,\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,\n};\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n\n  var ij = getQuadIndex(vertexIndex);\n  var xy = vec2<f32>(ij) * 2.0 - 1.0;\n\n  var n = getInstanceSize();\n  var f = instanceIndex % n;\n  var i = instanceIndex / n;\n\n  var stripIndex = getStripIndex(f);\n  var edgeIndex = stripIndex.y;\n  var triIndex = stripIndex.x;\n\n  var a = getVertex(triIndex, i);\n  var b = getVertex(triIndex + 1u + edgeIndex, i);\n\n  var left = a.position.xyz / a.position.w;\n  var right = b.position.xyz / b.position.w;\n\n  var join: vec3<f32>;\n  if (ij.x > 0u) {\n    join = getLineJoin(left, left, right, 0.0, xy.y, 2.0, 1, 0);\n  }\n  else {\n    join = getLineJoin(left, right, right, 0.0, xy.y, 2.0, 2, 0);\n  }\n\n  return VertexOutput(\n    vec4<f32>(join, 1.0),\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\n    vec2<f32>(0.0, 0.0),\n  );\n}\n",
  "transform/cartesian": "@external fn getMatrix(i: i32) -> mat4x4<f32>;\n\n@export fn getCartesianPosition(position: vec4<f32>) -> vec4<f32> {\n  let pos = vec4<f32>(position.xyz, 1.0);\n  return getMatrix(0u) * pos;\n}\n",
  "@use-gpu/wgsl/transform/cartesian": "@external fn getMatrix(i: i32) -> mat4x4<f32>;\n\n@export fn getCartesianPosition(position: vec4<f32>) -> vec4<f32> {\n  let pos = vec4<f32>(position.xyz, 1.0);\n  return getMatrix(0u) * pos;\n}\n",
  "use/color": "use \"@use-gpu/wgsl/use/gamma\"::{toLinear4};\n\n@export fn toColorSpace(color: vec4<f32>) -> vec4<f32> {\n  var out = color;\n  if (COLOR_SPACE == 1) { out = toLinear4(out); }\n  return out;\n}\n",
  "@use-gpu/wgsl/use/color": "use \"@use-gpu/wgsl/use/gamma\"::{toLinear4};\n\n@export fn toColorSpace(color: vec4<f32>) -> vec4<f32> {\n  var out = color;\n  if (COLOR_SPACE == 1) { out = toLinear4(out); }\n  return out;\n}\n",
  "use/gamma": "let gamma = 2.2;\n\n@export fn toLinear(v: f32) -> f32 {\n  return pow(v, gamma);\n}\n\n@export fn toLinear2(v: vec2<f32>) -> vec2<f32> {\n  return pow(v, vec2<f32>(gamma));\n}\n\n@export fn toLinear3(v: vec3<f32>) -> vec3<f32> {\n  return pow(v, vec3<f32>(gamma));\n}\n\n@export fn toLinear4(v: vec4<f32>) -> vec4<f32> {\n  return vec4(toLinear3(v.rgb), v.a);\n}\n\n@export fn toGamma(v: f32) -> f32 {\n  return pow(v, 1.0 / gamma);\n}\n\n@export fn toGamma2(v: vec2<f32>) -> vec2<f32> {\n  return pow(v, vec2<f32>(1.0 / gamma));\n}\n\n@export fn toGamma3(v: vec3<f32>) -> vec3<f32> {\n  return pow(v, vec3<f32>(1.0 / gamma));\n}\n\n@export fn toGamma4(v: vec4<f32>) -> vec4<f32> {\n  return vec4<f32>(toGamma3(v.rgb), v.a);\n}\n",
  "@use-gpu/wgsl/use/gamma": "let gamma = 2.2;\n\n@export fn toLinear(v: f32) -> f32 {\n  return pow(v, gamma);\n}\n\n@export fn toLinear2(v: vec2<f32>) -> vec2<f32> {\n  return pow(v, vec2<f32>(gamma));\n}\n\n@export fn toLinear3(v: vec3<f32>) -> vec3<f32> {\n  return pow(v, vec3<f32>(gamma));\n}\n\n@export fn toLinear4(v: vec4<f32>) -> vec4<f32> {\n  return vec4(toLinear3(v.rgb), v.a);\n}\n\n@export fn toGamma(v: f32) -> f32 {\n  return pow(v, 1.0 / gamma);\n}\n\n@export fn toGamma2(v: vec2<f32>) -> vec2<f32> {\n  return pow(v, vec2<f32>(1.0 / gamma));\n}\n\n@export fn toGamma3(v: vec3<f32>) -> vec3<f32> {\n  return pow(v, vec3<f32>(1.0 / gamma));\n}\n\n@export fn toGamma4(v: vec4<f32>) -> vec4<f32> {\n  return vec4<f32>(toGamma3(v.rgb), v.a);\n}\n",
  "use/light": "struct LightUniforms {\n  lightPosition: vec4<f32>,\n  lightColor: vec4<f32>,\n};\n\n@export @group(LIGHT) @binding(LIGHT) var<uniform> lightUniforms: LightUniforms;\n",
  "@use-gpu/wgsl/use/light": "struct LightUniforms {\n  lightPosition: vec4<f32>,\n  lightColor: vec4<f32>,\n};\n\n@export @group(LIGHT) @binding(LIGHT) var<uniform> lightUniforms: LightUniforms;\n",
  "use/picking": "struct PickingUniforms {\n  pickingId: u32,\n};\n\n@group(PICKING) @binding(PICKING) var<uniform> pickingUniforms: PickingUniforms;\n\n@export fn getPickingColor(fragIndex: u32) -> vec4<u32> {\n  var r = pickingUniforms.pickingId;\n  var g = fragIndex;\n  return vec4<u32>(r, g, 0u, 0u);\n}\n",
  "@use-gpu/wgsl/use/picking": "struct PickingUniforms {\n  pickingId: u32,\n};\n\n@group(PICKING) @binding(PICKING) var<uniform> pickingUniforms: PickingUniforms;\n\n@export fn getPickingColor(fragIndex: u32) -> vec4<u32> {\n  var r = pickingUniforms.pickingId;\n  var g = fragIndex;\n  return vec4<u32>(r, g, 0u, 0u);\n}\n",
  "use/types": "@export struct PickVertex {\n  position: vec4<f32>,\n  index: u32,\n};\n\n@export struct SolidVertex {\n  position: vec4<f32>,\n  color: vec4<f32>,\n  uv: vec2<f32>,\n  index: u32,\n};\n\n@export struct UIVertex {\n  position: vec4<f32>,\n\n  uv: vec2<f32>,\n  sdfConfig: vec4<f32>,\n  sdfUV: vec2<f32>,\n  textureUV: vec2<f32>,\n  repeat: i32,\n\n  mode: i32,\n  layout: vec4<f32>,\n  radius: vec4<f32>,\n  border: vec4<f32>,\n  stroke: vec4<f32>,\n  fill: vec4<f32>,\n\n  index: u32,\n};\n\n@export struct MeshVertex {\n  position: vec4<f32>,\n  normal: vec3<f32>,\n  color: vec4<f32>,\n  uv: vec2<f32>,\n};\n",
  "@use-gpu/wgsl/use/types": "@export struct PickVertex {\n  position: vec4<f32>,\n  index: u32,\n};\n\n@export struct SolidVertex {\n  position: vec4<f32>,\n  color: vec4<f32>,\n  uv: vec2<f32>,\n  index: u32,\n};\n\n@export struct UIVertex {\n  position: vec4<f32>,\n\n  uv: vec2<f32>,\n  sdfConfig: vec4<f32>,\n  sdfUV: vec2<f32>,\n  textureUV: vec2<f32>,\n  repeat: i32,\n\n  mode: i32,\n  layout: vec4<f32>,\n  radius: vec4<f32>,\n  border: vec4<f32>,\n  stroke: vec4<f32>,\n  fill: vec4<f32>,\n\n  index: u32,\n};\n\n@export struct MeshVertex {\n  position: vec4<f32>,\n  normal: vec3<f32>,\n  color: vec4<f32>,\n  uv: vec2<f32>,\n};\n",
  "use/view": "struct ViewUniforms {\n  projectionMatrix: mat4x4<f32>,\n  viewMatrix: mat4x4<f32>,\n  viewPosition: vec4<f32>,\n  viewNearFar: vec2<f32>,\n  viewResolution: vec2<f32>,\n  viewSize: vec2<f32>,\n  viewWorldUnit: f32,\n  viewPixelRatio: f32,\n};\n\n@export @group(VIEW) @binding(VIEW) var<uniform> viewUniforms: ViewUniforms;\n\n@export fn worldToView(position: vec4<f32>) -> vec4<f32> {\n  return viewUniforms.viewMatrix * position;\n}\n\n@export fn viewToClip(position: vec4<f32>) -> vec4<f32> {\n  return viewUniforms.projectionMatrix * position;\n}\n\n@export fn worldToClip(position: vec4<f32>) -> vec4<f32> {\n  return viewToClip(worldToView(position));\n}\n\n@export fn clipToScreen3D(position: vec4<f32>) -> vec3<f32> {\n  return vec3(position.xy * viewUniforms.viewSize, position.z);\n}\n\n@export fn screenToClip3D(position: vec4<f32>) -> vec3<f32> {\n  return vec3(position.xy * viewUniforms.viewResolution, position.z);\n}\n\n@export fn worldToClip3D(position: vec4<f32>) -> vec3<f32> {\n  return toClip3D(viewToClip(worldToView(position)));\n}\n\n@export fn toClip3D(position: vec4<f32>) -> vec3<f32> {\n  return position.xyz / position.w;\n}\n\n@export fn clipLineIntoView(anchor: vec4<f32>, head: vec4<f32>, near: f32) -> vec4<f32> {\n  var d = anchor - head;\n  if (dot(d, d) == 0.0) { return worldToView(anchor); }\n\n  var a = worldToView(anchor);\n  var b = worldToView(head);\n\n  if (-a.z < near) {\n    if (abs(b.z - a.z) > 0.001) {\n      let ratio = (near + a.z) / (a.z - b.z);\n      return mix(a, b, ratio);\n    }\n  }\n\n  return a;\n}\n\n@export fn getWorldScale(w: f32, f: f32) -> f32 {\n  var v = viewUniforms.viewResolution;\n  return getPerspectiveScale(w, f) * v.y * w;\n}\n\n@export fn getPerspectiveScale(w: f32, f: f32) -> f32 {\n  var m = viewUniforms.projectionMatrix;\n  var worldScale = m[1][1] * viewUniforms.viewWorldUnit;\n  var clipScale = mix(1.0, worldScale / w, f);\n  var pixelScale = clipScale * viewUniforms.viewPixelRatio;\n  return pixelScale;\n}\n",
  "@use-gpu/wgsl/use/view": "struct ViewUniforms {\n  projectionMatrix: mat4x4<f32>,\n  viewMatrix: mat4x4<f32>,\n  viewPosition: vec4<f32>,\n  viewNearFar: vec2<f32>,\n  viewResolution: vec2<f32>,\n  viewSize: vec2<f32>,\n  viewWorldUnit: f32,\n  viewPixelRatio: f32,\n};\n\n@export @group(VIEW) @binding(VIEW) var<uniform> viewUniforms: ViewUniforms;\n\n@export fn worldToView(position: vec4<f32>) -> vec4<f32> {\n  return viewUniforms.viewMatrix * position;\n}\n\n@export fn viewToClip(position: vec4<f32>) -> vec4<f32> {\n  return viewUniforms.projectionMatrix * position;\n}\n\n@export fn worldToClip(position: vec4<f32>) -> vec4<f32> {\n  return viewToClip(worldToView(position));\n}\n\n@export fn clipToScreen3D(position: vec4<f32>) -> vec3<f32> {\n  return vec3(position.xy * viewUniforms.viewSize, position.z);\n}\n\n@export fn screenToClip3D(position: vec4<f32>) -> vec3<f32> {\n  return vec3(position.xy * viewUniforms.viewResolution, position.z);\n}\n\n@export fn worldToClip3D(position: vec4<f32>) -> vec3<f32> {\n  return toClip3D(viewToClip(worldToView(position)));\n}\n\n@export fn toClip3D(position: vec4<f32>) -> vec3<f32> {\n  return position.xyz / position.w;\n}\n\n@export fn clipLineIntoView(anchor: vec4<f32>, head: vec4<f32>, near: f32) -> vec4<f32> {\n  var d = anchor - head;\n  if (dot(d, d) == 0.0) { return worldToView(anchor); }\n\n  var a = worldToView(anchor);\n  var b = worldToView(head);\n\n  if (-a.z < near) {\n    if (abs(b.z - a.z) > 0.001) {\n      let ratio = (near + a.z) / (a.z - b.z);\n      return mix(a, b, ratio);\n    }\n  }\n\n  return a;\n}\n\n@export fn getWorldScale(w: f32, f: f32) -> f32 {\n  var v = viewUniforms.viewResolution;\n  return getPerspectiveScale(w, f) * v.y * w;\n}\n\n@export fn getPerspectiveScale(w: f32, f: f32) -> f32 {\n  var m = viewUniforms.projectionMatrix;\n  var worldScale = m[1][1] * viewUniforms.viewWorldUnit;\n  var clipScale = mix(1.0, worldScale / w, f);\n  var pixelScale = clipScale * viewUniforms.viewPixelRatio;\n  return pixelScale;\n}\n"
};
export default WGSLModules;
