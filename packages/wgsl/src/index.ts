// File generated by build.ts. Do not edit directly.
// This file provides all the shader code in a statically importable form, used for testing.
export const WGSLModules = {
  "fragment/pbr": "// https://www.shadertoy.com/view/XlKSDR\n\nlet PI = 3.141592;\nlet F_DIELECTRIC = 0.04;\n\nfn saturate(x: f32) -> f32 {\n  return max(x, 0.0);\n}\n\nfn pow5(x: f32) -> f32 {\n  var x2 = x * x;\n  return x2 * x2 * x;\n}\n\n// D - Normal distribution term\nfn ndfGGX2(cosTheta: f32, alpha: f32) -> f32 {\n  var alphaSqr = alpha * alpha;\n  var denom = cosTheta * cosTheta * (alphaSqr - 1.0) + 1.0f;\n  return alphaSqr / (PI * denom * denom);\n}\n\nfn ndfGGX(cosTheta: f32, alpha: f32) -> f32 {\n  var oneMinus = 1.0 - cosTheta * cosTheta;\n  var a = cosTheta * alpha;\n  var k = alpha / (oneMinus + a * a);\n  var d = k * k * (1.0 / PI);\n  return d;\n}\n\n// F - Schlick approximation of Fresnel\nfn fresnelSchlickVec3(cosTheta: f32, f0: vec3<f32>) -> vec3<f32> {\n  var ft = pow5(1.0 - cosTheta);\n  return f0 + (1.0 - f0) * ft;\n}\n\nfn fresnelSchlick(cosTheta: f32, f0: f32, f90: f32) -> f32 {\n  return f0 + (f90 - f0) * pow(1.0 - cosTheta, 5.0);\n}\n\nfn fdBurley(dotNL: f32, dotNV: f32, dotLH: f32, alpha: f32) -> f32 {\n  var f90 = 0.5 + 2.0 * alpha * dotLH * dotLH;\n  var lightScatter = fresnelSchlick(dotNL, 1.0, f90);\n  var viewScatter = fresnelSchlick(dotNV, 1.0, f90);\n  return lightScatter * viewScatter * (1.0 / PI);\n}\n\n// G - Geometric attenuation term\nfn smithGGXCorrelated(dotNL: f32, dotNV: f32, alpha: f32) -> f32 {\n  var a2 = alpha * alpha;\n  var GGXL = dotNV * sqrt((dotNL - a2 * dotNL) * dotNL + a2);\n  var GGXV = dotNL * sqrt((dotNV - a2 * dotNV) * dotNV + a2);\n  return 0.5 / (GGXL + GGXV);\n}\n\nfn G1X(dotNX: f32, k: f32) -> f32 {\n  return 1.0f / (dotNX * (1.0f - k) + k);\n}\n\nfn geometricGGX(dotNL: f32, dotNV: f32, alpha: f32) -> f32 {\n  var k = alpha / 2.0f;\n  return G1X(dotNL, k) * G1X(dotNV, k);\n}\n\n// N, L, V must be normalized\n@export fn PBR(\n  N: vec3<f32>,\n  L: vec3<f32>,\n  V: vec3<f32>,\n  albedo: vec3<f32>,\n  metalness: f32,\n  roughness: f32,\n) -> vec3<f32> {\n\n  var diffuseColor = albedo * (1.0 - metalness);\n  var F0 = mix(vec3(F_DIELECTRIC), albedo, metalness);\n\n  var alpha = roughness * roughness;\n  var dotNV = saturate(dot(N, V));\n\n  var radiance = 3.1415;\n\n  var H = normalize(V + L);\n  var dotNL = saturate(dot(N, L));\n  var dotNH = saturate(dot(N, H));\n  var dotLH = saturate(dot(L, H));\n\n  var F = fresnelSchlickVec3(dotLH, F0);\n  var D = ndfGGX(dotNH, alpha);\n  var G = smithGGXCorrelated(dotNL, dotNV, alpha);\n  //float G2 = geometricGGX(dotNL, dotNV, alpha);\n  \n  var Fd = albedo * fdBurley(dotNL, dotNV, dotLH, alpha);\n  var Fs = F * D * G;\n\n  var direct = (Fd + Fs) * radiance * dotNL;\n  return direct;\n}\n",
  "@use-gpu/wgsl/fragment/pbr": "// https://www.shadertoy.com/view/XlKSDR\n\nlet PI = 3.141592;\nlet F_DIELECTRIC = 0.04;\n\nfn saturate(x: f32) -> f32 {\n  return max(x, 0.0);\n}\n\nfn pow5(x: f32) -> f32 {\n  var x2 = x * x;\n  return x2 * x2 * x;\n}\n\n// D - Normal distribution term\nfn ndfGGX2(cosTheta: f32, alpha: f32) -> f32 {\n  var alphaSqr = alpha * alpha;\n  var denom = cosTheta * cosTheta * (alphaSqr - 1.0) + 1.0f;\n  return alphaSqr / (PI * denom * denom);\n}\n\nfn ndfGGX(cosTheta: f32, alpha: f32) -> f32 {\n  var oneMinus = 1.0 - cosTheta * cosTheta;\n  var a = cosTheta * alpha;\n  var k = alpha / (oneMinus + a * a);\n  var d = k * k * (1.0 / PI);\n  return d;\n}\n\n// F - Schlick approximation of Fresnel\nfn fresnelSchlickVec3(cosTheta: f32, f0: vec3<f32>) -> vec3<f32> {\n  var ft = pow5(1.0 - cosTheta);\n  return f0 + (1.0 - f0) * ft;\n}\n\nfn fresnelSchlick(cosTheta: f32, f0: f32, f90: f32) -> f32 {\n  return f0 + (f90 - f0) * pow(1.0 - cosTheta, 5.0);\n}\n\nfn fdBurley(dotNL: f32, dotNV: f32, dotLH: f32, alpha: f32) -> f32 {\n  var f90 = 0.5 + 2.0 * alpha * dotLH * dotLH;\n  var lightScatter = fresnelSchlick(dotNL, 1.0, f90);\n  var viewScatter = fresnelSchlick(dotNV, 1.0, f90);\n  return lightScatter * viewScatter * (1.0 / PI);\n}\n\n// G - Geometric attenuation term\nfn smithGGXCorrelated(dotNL: f32, dotNV: f32, alpha: f32) -> f32 {\n  var a2 = alpha * alpha;\n  var GGXL = dotNV * sqrt((dotNL - a2 * dotNL) * dotNL + a2);\n  var GGXV = dotNL * sqrt((dotNV - a2 * dotNV) * dotNV + a2);\n  return 0.5 / (GGXL + GGXV);\n}\n\nfn G1X(dotNX: f32, k: f32) -> f32 {\n  return 1.0f / (dotNX * (1.0f - k) + k);\n}\n\nfn geometricGGX(dotNL: f32, dotNV: f32, alpha: f32) -> f32 {\n  var k = alpha / 2.0f;\n  return G1X(dotNL, k) * G1X(dotNV, k);\n}\n\n// N, L, V must be normalized\n@export fn PBR(\n  N: vec3<f32>,\n  L: vec3<f32>,\n  V: vec3<f32>,\n  albedo: vec3<f32>,\n  metalness: f32,\n  roughness: f32,\n) -> vec3<f32> {\n\n  var diffuseColor = albedo * (1.0 - metalness);\n  var F0 = mix(vec3(F_DIELECTRIC), albedo, metalness);\n\n  var alpha = roughness * roughness;\n  var dotNV = saturate(dot(N, V));\n\n  var radiance = 3.1415;\n\n  var H = normalize(V + L);\n  var dotNL = saturate(dot(N, L));\n  var dotNH = saturate(dot(N, H));\n  var dotLH = saturate(dot(L, H));\n\n  var F = fresnelSchlickVec3(dotLH, F0);\n  var D = ndfGGX(dotNH, alpha);\n  var G = smithGGXCorrelated(dotNL, dotNV, alpha);\n  //float G2 = geometricGGX(dotNL, dotNV, alpha);\n  \n  var Fd = albedo * fdBurley(dotNL, dotNV, dotLH, alpha);\n  var Fs = F * D * G;\n\n  var direct = (Fd + Fs) * radiance * dotNL;\n  return direct;\n}\n",
  "geometry/line": "use '@use-gpu/wgsl/use/view'::{ viewUniforms };\n\n// segments\n//\n// o--o--o  o--o--o--o  o--o\n// 1  3  2  1  3  3  2  1  2\n\nfn turn(xy: vec2<f32>) -> vec2<f32> {\n  return vec2<f32>(xy.y, -xy.x);\n}\n\nfn slerp(d: f32, a: vec2<f32>, b: vec2<f32>, t: f32) -> vec2<f32> {\n  var th = acos(d);\n  var ab = sin(vec2((1.0 - t) * th, t * th));\n  return normalize(a * ab.x + b * ab.y);\n}\n\n@export fn lineJoinBevel(left: vec2<f32>, right: vec2<f32>, segment: i32, arc: f32) -> vec2<f32> {\n  if (arc > 0) { return right; }\n  return left;\n}\n\n@export fn lineJoinMiter(left: vec2<f32>, right: vec2<f32>, segment: i32, arc: f32) -> vec2<f32> {\n  var mid: vec2<f32>;\n  var scale = 1.0;\n\n  if (arc == 0.0) { return left; }\n  if (arc == 1.0) { return right; }\n\n  mid = normalize((left + right) / 2.0);\n  scale = min(2.0, 1.0 / max(0.001, dot(mid, left)));\n\n  return mid * scale;\n}\n\n@export fn lineJoinRound(left: vec2<f32>, right: vec2<f32>, segment: i32, arc: f32) -> vec2<f32> {\n  var mid: vec2<f32>;\n\n  if (arc == 0.0) { return left; }\n  if (arc == 1.0) { return right; }\n\n  var d = dot(left, right);\n  if (d > 0.999) { return left; }\n  return slerp(d, left, right, arc);\n}\n\n@export fn getLineJoin(\n  beforePoint: vec3<f32>,\n  centerPoint: vec3<f32>,\n  afterPoint: vec3<f32>,\n  arc: f32,\n  y: f32,\n  size: f32,\n  segment: i32,\n  style: i32,\n) -> vec3<f32> {\n  var before = beforePoint.xy * viewUniforms.viewSize;\n  var center = centerPoint.xy * viewUniforms.viewSize;\n  var after = afterPoint.xy * viewUniforms.viewSize;\n\n  var left = turn(normalize(center - before));\n  var right = turn(normalize(after - center));\n\n  var mid: vec2<f32>;\n  if (segment == 2) {\n    mid = left;\n  }\n  else if (segment == 1) {\n    mid = right;\n  }\n  else {\n    var c = cross(vec3(left, 0.0), vec3(right, 0.0)).z;\n    if (c * y < 0.0) {\n      mid = lineJoinMiter(left, right, segment, arc);\n    }\n    else {\n      if (style == 0) { mid = lineJoinBevel(left, right, segment, arc); }\n      if (style == 1) { mid = lineJoinMiter(left, right, segment, arc); }\n      if (style == 2) { mid = lineJoinRound(left, right, segment, arc); }\n    }\n  }\n\n  var offset = size * mid * y;\n  // TODO: awaiting compound support\n  //center.xy += offset;\n  center.xy = center.xy + offset;\n\n  return vec3<f32>(center * viewUniforms.viewResolution, centerPoint.z);\n}\n",
  "@use-gpu/wgsl/geometry/line": "use '@use-gpu/wgsl/use/view'::{ viewUniforms };\n\n// segments\n//\n// o--o--o  o--o--o--o  o--o\n// 1  3  2  1  3  3  2  1  2\n\nfn turn(xy: vec2<f32>) -> vec2<f32> {\n  return vec2<f32>(xy.y, -xy.x);\n}\n\nfn slerp(d: f32, a: vec2<f32>, b: vec2<f32>, t: f32) -> vec2<f32> {\n  var th = acos(d);\n  var ab = sin(vec2((1.0 - t) * th, t * th));\n  return normalize(a * ab.x + b * ab.y);\n}\n\n@export fn lineJoinBevel(left: vec2<f32>, right: vec2<f32>, segment: i32, arc: f32) -> vec2<f32> {\n  if (arc > 0) { return right; }\n  return left;\n}\n\n@export fn lineJoinMiter(left: vec2<f32>, right: vec2<f32>, segment: i32, arc: f32) -> vec2<f32> {\n  var mid: vec2<f32>;\n  var scale = 1.0;\n\n  if (arc == 0.0) { return left; }\n  if (arc == 1.0) { return right; }\n\n  mid = normalize((left + right) / 2.0);\n  scale = min(2.0, 1.0 / max(0.001, dot(mid, left)));\n\n  return mid * scale;\n}\n\n@export fn lineJoinRound(left: vec2<f32>, right: vec2<f32>, segment: i32, arc: f32) -> vec2<f32> {\n  var mid: vec2<f32>;\n\n  if (arc == 0.0) { return left; }\n  if (arc == 1.0) { return right; }\n\n  var d = dot(left, right);\n  if (d > 0.999) { return left; }\n  return slerp(d, left, right, arc);\n}\n\n@export fn getLineJoin(\n  beforePoint: vec3<f32>,\n  centerPoint: vec3<f32>,\n  afterPoint: vec3<f32>,\n  arc: f32,\n  y: f32,\n  size: f32,\n  segment: i32,\n  style: i32,\n) -> vec3<f32> {\n  var before = beforePoint.xy * viewUniforms.viewSize;\n  var center = centerPoint.xy * viewUniforms.viewSize;\n  var after = afterPoint.xy * viewUniforms.viewSize;\n\n  var left = turn(normalize(center - before));\n  var right = turn(normalize(after - center));\n\n  var mid: vec2<f32>;\n  if (segment == 2) {\n    mid = left;\n  }\n  else if (segment == 1) {\n    mid = right;\n  }\n  else {\n    var c = cross(vec3(left, 0.0), vec3(right, 0.0)).z;\n    if (c * y < 0.0) {\n      mid = lineJoinMiter(left, right, segment, arc);\n    }\n    else {\n      if (style == 0) { mid = lineJoinBevel(left, right, segment, arc); }\n      if (style == 1) { mid = lineJoinMiter(left, right, segment, arc); }\n      if (style == 2) { mid = lineJoinRound(left, right, segment, arc); }\n    }\n  }\n\n  var offset = size * mid * y;\n  // TODO: awaiting compound support\n  //center.xy += offset;\n  center.xy = center.xy + offset;\n\n  return vec3<f32>(center * viewUniforms.viewResolution, centerPoint.z);\n}\n",
  "geometry/quad": "let QUAD: array<vec2<i32>, 4> = array<vec2<i32>, 4>(\n  vec2<i32>(0, 0),\n  vec2<i32>(1, 0),\n  vec2<i32>(0, 1),\n  vec2<i32>(1, 1),\n);\n\n@export fn getQuadIndex(vertex: i32) -> vec2<i32> {\n  return QUAD[vertex];\n}\n\n@export fn getQuadUV(vertex: i32) -> vec2<f32> {\n  return vec2<f32>(getQuadIndex(vertex));\n}\n\n",
  "@use-gpu/wgsl/geometry/quad": "let QUAD: array<vec2<i32>, 4> = array<vec2<i32>, 4>(\n  vec2<i32>(0, 0),\n  vec2<i32>(1, 0),\n  vec2<i32>(0, 1),\n  vec2<i32>(1, 1),\n);\n\n@export fn getQuadIndex(vertex: i32) -> vec2<i32> {\n  return QUAD[vertex];\n}\n\n@export fn getQuadUV(vertex: i32) -> vec2<f32> {\n  return vec2<f32>(getQuadIndex(vertex));\n}\n\n",
  "geometry/strip": "@export fn getStripIndex(vertex: i32) -> vec2<i32> {\n  var x = vertex >> 1;\n  var y = vertex & 1;\n  return vec2<i32>(x, y);\n}\n\n@export fn getStripUV(vertex: i32) -> vec2<f32> {\n  return vec2<f32>(getStripIndex(vertex));\n}\n\n",
  "@use-gpu/wgsl/geometry/strip": "@export fn getStripIndex(vertex: i32) -> vec2<i32> {\n  var x = vertex >> 1;\n  var y = vertex & 1;\n  return vec2<i32>(x, y);\n}\n\n@export fn getStripUV(vertex: i32) -> vec2<f32> {\n  return vec2<f32>(getStripIndex(vertex));\n}\n\n",
  "instance/draw/mesh-pick": "use '@use-gpu/wgsl/use/view'::{ worldToClip };\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>;\n  @location(0) @interpolate(flat) fragIndex: u32;\n};\n\n@stage(vertex)\nfn main(\n  @builtin(instance_index) instanceIndex: u32,\n  @location(0) position: vec4<f32>,\n  @location(1) normal: vec4<f32>,\n  @location(2) color: vec4<f32>,\n  @location(3) uv: vec2<f32>,\n) -> VertexOutput {\n  \n  var outPosition: vec4<f32> = worldToClip(position);\n  var fragIndex = u32(instanceIndex);\n  \n  return VertexOutput(\n    outPosition,\n    fragIndex,\n  );\n}\n",
  "@use-gpu/wgsl/instance/draw/mesh-pick": "use '@use-gpu/wgsl/use/view'::{ worldToClip };\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>;\n  @location(0) @interpolate(flat) fragIndex: u32;\n};\n\n@stage(vertex)\nfn main(\n  @builtin(instance_index) instanceIndex: u32,\n  @location(0) position: vec4<f32>,\n  @location(1) normal: vec4<f32>,\n  @location(2) color: vec4<f32>,\n  @location(3) uv: vec2<f32>,\n) -> VertexOutput {\n  \n  var outPosition: vec4<f32> = worldToClip(position);\n  var fragIndex = u32(instanceIndex);\n  \n  return VertexOutput(\n    outPosition,\n    fragIndex,\n  );\n}\n",
  "instance/draw/mesh": "use '@use-gpu/wgsl/use/view'::{ worldToClip };\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>;\n  @location(0) fragColor: vec4<f32>;\n  @location(1) fragUV: vec2<f32>;\n  @location(2) fragNormal: vec3<f32>;\n  @location(3) fragPosition: vec3<f32>;\n};\n\n@stage(vertex)\nfn main(\n  @builtin(instance_index) instanceIndex: u32,\n  @location(0) position: vec4<f32>,\n  @location(1) normal: vec4<f32>,\n  @location(2) color: vec4<f32>,\n  @location(3) uv: vec2<f32>,\n) -> VertexOutput {\n  \n  var outPosition: vec4<f32> = worldToClip(position);\n  \n  return VertexOutput(\n    outPosition,\n    color,\n    uv,\n    normal.xyz,\n    position.xyz,\n  );\n}\n",
  "@use-gpu/wgsl/instance/draw/mesh": "use '@use-gpu/wgsl/use/view'::{ worldToClip };\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>;\n  @location(0) fragColor: vec4<f32>;\n  @location(1) fragUV: vec2<f32>;\n  @location(2) fragNormal: vec3<f32>;\n  @location(3) fragPosition: vec3<f32>;\n};\n\n@stage(vertex)\nfn main(\n  @builtin(instance_index) instanceIndex: u32,\n  @location(0) position: vec4<f32>,\n  @location(1) normal: vec4<f32>,\n  @location(2) color: vec4<f32>,\n  @location(3) uv: vec2<f32>,\n) -> VertexOutput {\n  \n  var outPosition: vec4<f32> = worldToClip(position);\n  \n  return VertexOutput(\n    outPosition,\n    color,\n    uv,\n    normal.xyz,\n    position.xyz,\n  );\n}\n",
  "instance/draw/virtual-pick": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\n\n@external fn getVertex(v: i32, i: i32) -> SolidVertex {};\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>;\n  @location(0) @interpolate(flat) fragIndex: u32;\n};\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n  var v = getVertex(i32(vertexIndex), i32(instanceIndex));\n\n  return VertexOutput(\n    v.position,\n    instanceIndex,\n  );\n}\n",
  "@use-gpu/wgsl/instance/draw/virtual-pick": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\n\n@external fn getVertex(v: i32, i: i32) -> SolidVertex {};\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>;\n  @location(0) @interpolate(flat) fragIndex: u32;\n};\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n  var v = getVertex(i32(vertexIndex), i32(instanceIndex));\n\n  return VertexOutput(\n    v.position,\n    instanceIndex,\n  );\n}\n",
  "instance/draw/virtual": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\n\n@external fn getVertex(v: i32, i: i32) -> SolidVertex {};\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>;\n  @location(0) fragColor: vec4<f32>;\n  @location(1) fragUV: vec2<f32>;\n};\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n  var v = getVertex(i32(vertexIndex), i32(instanceIndex));\n\n  return VertexOutput(\n    v.position,\n    v.color,\n    v.uv,\n  );\n}\n",
  "@use-gpu/wgsl/instance/draw/virtual": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\n\n@external fn getVertex(v: i32, i: i32) -> SolidVertex {};\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>;\n  @location(0) fragColor: vec4<f32>;\n  @location(1) fragUV: vec2<f32>;\n};\n\n@stage(vertex)\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n  var v = getVertex(i32(vertexIndex), i32(instanceIndex));\n\n  return VertexOutput(\n    v.position,\n    v.color,\n    v.uv,\n  );\n}\n",
  "instance/draw/wireframe-strip": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadIndex };\nuse '@use-gpu/wgsl/geometry/strip'::{ getStripIndex };\nuse '@use-gpu/wgsl/geometry/line'::{ getLineJoin };\n\n@external fn getVertex(v: i32, i: i32) -> SolidVertex {};\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>;\n  @location(0) fragColor: vec4<f32>;\n  @location(1) fragUV: vec2<f32>;\n};\n\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n\n  var ij = getQuadIndex(vertexIndex);\n  var xy = vec2(ij) * 2.0 - 1.0;\n\n  var n = STRIP_SEGMENTS * 2 + 1;\n  var f = instanceIndex % n;\n  var i = instanceIndex / n;\n\n  var stripIndex = getStripIndex(f);\n  var edgeIndex = stripIndex.y;\n  var triIndex = stripIndex.x;\n\n  var a = getVertex(triIndex, i);\n  var b = getVertex(triIndex + 1 + edgeIndex, i);\n\n  var left = a.position.xyz / a.position.w;\n  var right = b.position.xyz / b.position.w;\n\n  var join;\n  if (ij.x > 0) {\n    join = getLineJoin(left, left, right, 0.0, xy.y, 2.0, 1, 0);\n  }\n  else {\n    join = getLineJoin(left, right, right, 0.0, xy.y, 2.0, 2, 0);\n  }\n\n  return VertexOutput(\n    vec4<f32>(join, 1.0),\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\n    vec2<f32>(0.0, 0.0),\n  );\n}\n",
  "@use-gpu/wgsl/instance/draw/wireframe-strip": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/geometry/quad'::{ getQuadIndex };\nuse '@use-gpu/wgsl/geometry/strip'::{ getStripIndex };\nuse '@use-gpu/wgsl/geometry/line'::{ getLineJoin };\n\n@external fn getVertex(v: i32, i: i32) -> SolidVertex {};\n\nstruct VertexOutput {\n  @builtin(position) position: vec4<f32>;\n  @location(0) fragColor: vec4<f32>;\n  @location(1) fragUV: vec2<f32>;\n};\n\nfn main(\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n) -> VertexOutput {\n\n  var ij = getQuadIndex(vertexIndex);\n  var xy = vec2(ij) * 2.0 - 1.0;\n\n  var n = STRIP_SEGMENTS * 2 + 1;\n  var f = instanceIndex % n;\n  var i = instanceIndex / n;\n\n  var stripIndex = getStripIndex(f);\n  var edgeIndex = stripIndex.y;\n  var triIndex = stripIndex.x;\n\n  var a = getVertex(triIndex, i);\n  var b = getVertex(triIndex + 1 + edgeIndex, i);\n\n  var left = a.position.xyz / a.position.w;\n  var right = b.position.xyz / b.position.w;\n\n  var join;\n  if (ij.x > 0) {\n    join = getLineJoin(left, left, right, 0.0, xy.y, 2.0, 1, 0);\n  }\n  else {\n    join = getLineJoin(left, right, right, 0.0, xy.y, 2.0, 2, 0);\n  }\n\n  return VertexOutput(\n    vec4<f32>(join, 1.0),\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\n    vec2<f32>(0.0, 0.0),\n  );\n}\n",
  "instance/fragment/mesh-pick": "use '@use-gpu/wgsl/use/picking'::{ getPickingColor }\n\n//@group(1) @binding(0) var s: sampler;\n//@group(1) @binding(1) var t: texture_2d<f32>;\n\nstruct FragmentOutput {\n  @location(0) outColor: vec4<u32>;\n};\n\n@stage(fragment)\nfn main(\n  @location(0) @interpolate(flat) fragIndex: u32,\n) -> FragmentOutput {\n  var outColor = getPickingColor(fragIndex);\n\n  return FragmentOutput(outColor);\n}\n",
  "@use-gpu/wgsl/instance/fragment/mesh-pick": "use '@use-gpu/wgsl/use/picking'::{ getPickingColor }\n\n//@group(1) @binding(0) var s: sampler;\n//@group(1) @binding(1) var t: texture_2d<f32>;\n\nstruct FragmentOutput {\n  @location(0) outColor: vec4<u32>;\n};\n\n@stage(fragment)\nfn main(\n  @location(0) @interpolate(flat) fragIndex: u32,\n) -> FragmentOutput {\n  var outColor = getPickingColor(fragIndex);\n\n  return FragmentOutput(outColor);\n}\n",
  "instance/fragment/mesh": "use '@use-gpu/wgsl/fragment/pbr'::{ PBR };\nuse '@use-gpu/wgsl/use/view'::{ viewUniforms };\nuse '@use-gpu/wgsl/use/light'::{ lightUniforms };\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var t: texture_2d<f32>;\n\nstruct FragmentOutput {\n  @location(0) outColor: vec4<f32>;\n};\n\n@stage(fragment)\nfn main(\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,\n  @location(2) fragNormal: vec3<f32>,\n  @location(3) fragPosition: vec3<f32>,\n) -> FragmentOutput {\n  var fragLight: vec3<f32> = lightUniforms.lightPosition.xyz - fragPosition;\n  var fragView: vec3<f32> = viewUniforms.viewPosition.xyz - fragPosition;\n\n  var N: vec3<f32> = normalize(fragNormal);\n  var L: vec3<f32> = normalize(fragLight);\n  var V: vec3<f32> = normalize(fragView);\n\n  var texColor: vec4<f32> = textureSample(t, s, fragUV);\n  var inColor: vec4<f32> = fragColor * texColor;\n  if (inColor.a <= 0.0) { discard; }\n\n  var albedo: vec3<f32> = inColor.rgb;\n  var metalness: f32 = 0.2;\n  var roughness: f32 = 0.8;\n\n  var color: vec3<f32> = PBR(N, L, V, albedo, metalness, roughness) * lightUniforms.lightColor.xyz;\n  var outColor: vec4<f32> = vec4<f32>(color, inColor.a);\n\n  return FragmentOutput(outColor);\n}\n",
  "@use-gpu/wgsl/instance/fragment/mesh": "use '@use-gpu/wgsl/fragment/pbr'::{ PBR };\nuse '@use-gpu/wgsl/use/view'::{ viewUniforms };\nuse '@use-gpu/wgsl/use/light'::{ lightUniforms };\n\n@group(1) @binding(0) var s: sampler;\n@group(1) @binding(1) var t: texture_2d<f32>;\n\nstruct FragmentOutput {\n  @location(0) outColor: vec4<f32>;\n};\n\n@stage(fragment)\nfn main(\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,\n  @location(2) fragNormal: vec3<f32>,\n  @location(3) fragPosition: vec3<f32>,\n) -> FragmentOutput {\n  var fragLight: vec3<f32> = lightUniforms.lightPosition.xyz - fragPosition;\n  var fragView: vec3<f32> = viewUniforms.viewPosition.xyz - fragPosition;\n\n  var N: vec3<f32> = normalize(fragNormal);\n  var L: vec3<f32> = normalize(fragLight);\n  var V: vec3<f32> = normalize(fragView);\n\n  var texColor: vec4<f32> = textureSample(t, s, fragUV);\n  var inColor: vec4<f32> = fragColor * texColor;\n  if (inColor.a <= 0.0) { discard; }\n\n  var albedo: vec3<f32> = inColor.rgb;\n  var metalness: f32 = 0.2;\n  var roughness: f32 = 0.8;\n\n  var color: vec3<f32> = PBR(N, L, V, albedo, metalness, roughness) * lightUniforms.lightColor.xyz;\n  var outColor: vec4<f32> = vec4<f32>(color, inColor.a);\n\n  return FragmentOutput(outColor);\n}\n",
  "instance/fragment/solid-pick": "use '@use-gpu/wgsl/use/picking'::{ getPickingColor };\n\nfn main(\n  @location(0) @interpolate(flat) fragIndex: u32,\n) -> vec4<u32> {\n  return getPickingColor(fragIndex);\n}\n\n",
  "@use-gpu/wgsl/instance/fragment/solid-pick": "use '@use-gpu/wgsl/use/picking'::{ getPickingColor };\n\nfn main(\n  @location(0) @interpolate(flat) fragIndex: u32,\n) -> vec4<u32> {\n  return getPickingColor(fragIndex);\n}\n\n",
  "instance/fragment/solid": "@external fn getFragment(color: vec4<f32>, uv: vec2<f32>) -> vec4<f32> {};\n\nfn main(\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,  \n) -> vec4<f32> {\n  var outColor = fragColor;\n\n  outColor.xyz *= outColor.a;\n  outColor = getFragment(outColor, fragUV);\n\n  if (outColor.a <= 0.0) discard;\n  return outColor;\n}\n",
  "@use-gpu/wgsl/instance/fragment/solid": "@external fn getFragment(color: vec4<f32>, uv: vec2<f32>) -> vec4<f32> {};\n\nfn main(\n  @location(0) fragColor: vec4<f32>,\n  @location(1) fragUV: vec2<f32>,  \n) -> vec4<f32> {\n  var outColor = fragColor;\n\n  outColor.xyz *= outColor.a;\n  outColor = getFragment(outColor, fragUV);\n\n  if (outColor.a <= 0.0) discard;\n  return outColor;\n}\n",
  "instance/vertex/line": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/use/view'::{ worldToClip, worldToClip3D, getPerspectiveScale };\nuse '@use-gpu/wgsl/geometry/strip'::{ getStripIndex };\nuse '@use-gpu/wgsl/geometry/line'::{ getLineJoin };\n\n//var NaN: f32 = (0.0/0.0);\n\n@external fn getPosition(i: i32) -> vec4<f32> {};\n@external fn getSegment(i: i32) -> i32 {};\n@external fn getColor(i: i32) -> vec4<f32> {};\n@external fn getSize(i: i32) -> f32 {};\n@external fn getDepth(i: i32) -> f32 {};\n\n@export fn getLineVertex(vertexIndex: i32, instanceIndex: i32) -> SolidVertex {\n  var ij = getStripIndex(vertexIndex);\n\n  var segmentLeft = getSegment(instanceIndex);\n  if (segmentLeft == 0 || segmentLeft == 2) {\n    return SolidVertex(\n      vec4(NaN, NaN, NaN, NaN),\n      vec4(NaN, NaN, NaN, NaN),\n      vec2(NaN, NaN)\n    );\n  }\n\n  var uv = vec2<f32>(ij);\n  var xy = uv * 2.0 - 1.0;\n\n  var cornerIndex;\n  var joinIndex;\n  if (ij.x == 0) {\n    joinIndex = LINE_JOIN_SIZE;\n    cornerIndex = instanceIndex;\n  }\n  else {\n    joinIndex = ij.x - 1;\n    cornerIndex = instanceIndex + 1;\n  }\n\n  var segment = getSegment(cornerIndex);\n  var color = getColor(cornerIndex);\n  var size = getSize(cornerIndex);\n  var depth = getDepth(cornerIndex);\n\n  var beforePos = getPosition(cornerIndex - 1);\n  var centerPos = getPosition(cornerIndex);\n  var afterPos = getPosition(cornerIndex + 1);\n\n  var before = worldToClip3D(beforePos);\n  var center = worldToClip(centerPos);\n  var after = worldToClip3D(afterPos);\n\n  // Lerp between fixed size and full perspective\n  var pixelScale = getPerspectiveScale(center.w, depth);\n  // TODO: awaiting compound support\n  // size *= pixelScale;\n  size = size * pixelScale;\n\n  var arc = joinIndex / float(LINE_JOIN_SIZE);\n  var lineJoin = getLineJoin(before, center.xyz / center.w, after, arc, xy.y, size, segment, LINE_JOIN_STYLE);\n\n  return SolidVertex(\n    vec4<f32>(lineJoin, 1.0),\n    color,\n    uv\n  );\n}\n",
  "@use-gpu/wgsl/instance/vertex/line": "use '@use-gpu/wgsl/use/types'::{ SolidVertex };\nuse '@use-gpu/wgsl/use/view'::{ worldToClip, worldToClip3D, getPerspectiveScale };\nuse '@use-gpu/wgsl/geometry/strip'::{ getStripIndex };\nuse '@use-gpu/wgsl/geometry/line'::{ getLineJoin };\n\n//var NaN: f32 = (0.0/0.0);\n\n@external fn getPosition(i: i32) -> vec4<f32> {};\n@external fn getSegment(i: i32) -> i32 {};\n@external fn getColor(i: i32) -> vec4<f32> {};\n@external fn getSize(i: i32) -> f32 {};\n@external fn getDepth(i: i32) -> f32 {};\n\n@export fn getLineVertex(vertexIndex: i32, instanceIndex: i32) -> SolidVertex {\n  var ij = getStripIndex(vertexIndex);\n\n  var segmentLeft = getSegment(instanceIndex);\n  if (segmentLeft == 0 || segmentLeft == 2) {\n    return SolidVertex(\n      vec4(NaN, NaN, NaN, NaN),\n      vec4(NaN, NaN, NaN, NaN),\n      vec2(NaN, NaN)\n    );\n  }\n\n  var uv = vec2<f32>(ij);\n  var xy = uv * 2.0 - 1.0;\n\n  var cornerIndex;\n  var joinIndex;\n  if (ij.x == 0) {\n    joinIndex = LINE_JOIN_SIZE;\n    cornerIndex = instanceIndex;\n  }\n  else {\n    joinIndex = ij.x - 1;\n    cornerIndex = instanceIndex + 1;\n  }\n\n  var segment = getSegment(cornerIndex);\n  var color = getColor(cornerIndex);\n  var size = getSize(cornerIndex);\n  var depth = getDepth(cornerIndex);\n\n  var beforePos = getPosition(cornerIndex - 1);\n  var centerPos = getPosition(cornerIndex);\n  var afterPos = getPosition(cornerIndex + 1);\n\n  var before = worldToClip3D(beforePos);\n  var center = worldToClip(centerPos);\n  var after = worldToClip3D(afterPos);\n\n  // Lerp between fixed size and full perspective\n  var pixelScale = getPerspectiveScale(center.w, depth);\n  // TODO: awaiting compound support\n  // size *= pixelScale;\n  size = size * pixelScale;\n\n  var arc = joinIndex / float(LINE_JOIN_SIZE);\n  var lineJoin = getLineJoin(before, center.xyz / center.w, after, arc, xy.y, size, segment, LINE_JOIN_STYLE);\n\n  return SolidVertex(\n    vec4<f32>(lineJoin, 1.0),\n    color,\n    uv\n  );\n}\n",
  "mask/passthru": "@export fn getPassThruFragment(color: vec4<f32>, uv: vec2<f32>) -> vec4<f32> {\n  return color;\n}\n",
  "@use-gpu/wgsl/mask/passthru": "@export fn getPassThruFragment(color: vec4<f32>, uv: vec2<f32>) -> vec4<f32> {\n  return color;\n}\n",
  "use/light": "struct LightUniforms {\n  lightPosition: vec4<f32>;\n  lightColor: vec4<f32>;\n};\n\n@export @group(LIGHT) @binding(LIGHT) var<uniform> lightUniforms: LightUniforms;\n",
  "@use-gpu/wgsl/use/light": "struct LightUniforms {\n  lightPosition: vec4<f32>;\n  lightColor: vec4<f32>;\n};\n\n@export @group(LIGHT) @binding(LIGHT) var<uniform> lightUniforms: LightUniforms;\n",
  "use/picking": "struct PickingUniforms {\n  pickingId: u32;\n};\n\n@group(PICKING) @binding(PICKING) var<uniform> pickingUniforms: PickingUniforms;\n\n@export fn getPickingColor(fragIndex: u32) -> vec4<u32> {\n  var r = pickingUniforms.pickingId;\n  var g = fragIndex;\n  return vec4<u32>(r, g, 0u, 0u);\n}\n",
  "@use-gpu/wgsl/use/picking": "struct PickingUniforms {\n  pickingId: u32;\n};\n\n@group(PICKING) @binding(PICKING) var<uniform> pickingUniforms: PickingUniforms;\n\n@export fn getPickingColor(fragIndex: u32) -> vec4<u32> {\n  var r = pickingUniforms.pickingId;\n  var g = fragIndex;\n  return vec4<u32>(r, g, 0u, 0u);\n}\n",
  "use/types": "@export struct SolidVertex {\n  position: vec4<f32>;\n  color: vec4<f32>;\n  uv: vec2<f32>;\n};\n\n@export struct MeshVertex {\n  position: vec4<f32>;\n  normal: vec3<f32>;\n  color: vec4<f32>;\n  uv: vec2<f32>;\n};\n",
  "@use-gpu/wgsl/use/types": "@export struct SolidVertex {\n  position: vec4<f32>;\n  color: vec4<f32>;\n  uv: vec2<f32>;\n};\n\n@export struct MeshVertex {\n  position: vec4<f32>;\n  normal: vec3<f32>;\n  color: vec4<f32>;\n  uv: vec2<f32>;\n};\n",
  "use/view": "struct ViewUniforms {\n  projectionMatrix: mat4x4<f32>;\n  viewMatrix: mat4x4<f32>;\n  viewPosition: vec4<f32>;\n  viewResolution: vec2<f32>;\n  viewSize: vec2<f32>;\n  viewWorldUnit: f32;\n  viewPixelRatio: f32;\n};\n\n@export @group(VIEW) @binding(VIEW) var<uniform> viewUniforms: ViewUniforms;\n\n@export fn worldToView(position: vec4<f32>) -> vec4<f32> {\n  return viewUniforms.viewMatrix * position;\n}\n\n@export fn viewToClip(position: vec4<f32>) -> vec4<f32> {\n  return viewUniforms.projectionMatrix * position;\n}\n\n@export fn worldToClip(position: vec4<f32>) -> vec4<f32> {\n  return viewToClip(worldToView(position));\n}\n\n@export fn clipToScreen3D(position: vec4<f32>) -> vec3<f32> {\n  return vec3(position.xy * viewUniforms.viewSize, position.z);\n}\n\n@export fn screenToClip3D(position: vec4<f32>) -> vec3<f32> {\n  return vec3(position.xy * viewUniforms.viewResolution, position.z);\n}\n\n@export fn worldToClip3D(position: vec4<f32>) -> vec3<f32> {\n  position = viewToClip(worldToView(position));\n  return position.xyz / position.w;\n}\n\n@export fn getPerspectiveScale(w: f32, f: f32) -> f32 {\n  var m = viewUniforms.projectionMatrix;\n  var worldScale = m[1][1] * viewUniforms.viewWorldUnit;\n  var clipScale = mix(1.0, worldScale / w, f);\n  var pixelScale = clipScale * viewUniforms.viewPixelRatio;\n  return pixelScale;\n}\n",
  "@use-gpu/wgsl/use/view": "struct ViewUniforms {\n  projectionMatrix: mat4x4<f32>;\n  viewMatrix: mat4x4<f32>;\n  viewPosition: vec4<f32>;\n  viewResolution: vec2<f32>;\n  viewSize: vec2<f32>;\n  viewWorldUnit: f32;\n  viewPixelRatio: f32;\n};\n\n@export @group(VIEW) @binding(VIEW) var<uniform> viewUniforms: ViewUniforms;\n\n@export fn worldToView(position: vec4<f32>) -> vec4<f32> {\n  return viewUniforms.viewMatrix * position;\n}\n\n@export fn viewToClip(position: vec4<f32>) -> vec4<f32> {\n  return viewUniforms.projectionMatrix * position;\n}\n\n@export fn worldToClip(position: vec4<f32>) -> vec4<f32> {\n  return viewToClip(worldToView(position));\n}\n\n@export fn clipToScreen3D(position: vec4<f32>) -> vec3<f32> {\n  return vec3(position.xy * viewUniforms.viewSize, position.z);\n}\n\n@export fn screenToClip3D(position: vec4<f32>) -> vec3<f32> {\n  return vec3(position.xy * viewUniforms.viewResolution, position.z);\n}\n\n@export fn worldToClip3D(position: vec4<f32>) -> vec3<f32> {\n  position = viewToClip(worldToView(position));\n  return position.xyz / position.w;\n}\n\n@export fn getPerspectiveScale(w: f32, f: f32) -> f32 {\n  var m = viewUniforms.projectionMatrix;\n  var worldScale = m[1][1] * viewUniforms.viewWorldUnit;\n  var clipScale = mix(1.0, worldScale / w, f);\n  var pixelScale = clipScale * viewUniforms.viewPixelRatio;\n  return pixelScale;\n}\n"
};
export default WGSLModules;
